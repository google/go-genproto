// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/osconfig/v1/osconfig_service.proto

package osconfig

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("google/cloud/osconfig/v1/osconfig_service.proto", fileDescriptor_23b8161c718b0c34)
}

var fileDescriptor_23b8161c718b0c34 = []byte{
	// 699 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x41, 0x4f, 0x13, 0x41,
	0x18, 0xcd, 0x12, 0xc3, 0x61, 0x0d, 0x62, 0x26, 0x22, 0xa4, 0x70, 0xb1, 0x5e, 0xa4, 0xc2, 0x0c,
	0xa5, 0x82, 0x71, 0x85, 0xc4, 0xd2, 0x12, 0x22, 0x9a, 0x48, 0x34, 0xe1, 0x60, 0x48, 0xc8, 0x74,
	0x19, 0x96, 0x25, 0xdb, 0x99, 0x71, 0x67, 0x0a, 0x12, 0xc3, 0xc5, 0x7f, 0x60, 0xbc, 0x99, 0x98,
	0x78, 0xf0, 0x64, 0xe2, 0x5f, 0x30, 0x26, 0xde, 0x38, 0xea, 0x8d, 0x93, 0x07, 0x4f, 0xc6, 0x1f,
	0x61, 0x76, 0x66, 0x67, 0xbb, 0xbb, 0xb0, 0xb4, 0xd5, 0x5b, 0xd9, 0xf7, 0xde, 0xf7, 0xbd, 0x37,
	0xf3, 0x7d, 0x8c, 0x8d, 0x3c, 0xc6, 0xbc, 0x80, 0x20, 0x37, 0x60, 0x9d, 0x1d, 0xc4, 0x84, 0xcb,
	0xe8, 0xae, 0xef, 0xa1, 0x83, 0x6a, 0xf2, 0x7b, 0x5b, 0x90, 0xf0, 0xc0, 0x77, 0x09, 0xe4, 0x21,
	0x93, 0x0c, 0x4c, 0x68, 0x01, 0x54, 0x02, 0x68, 0x48, 0xf0, 0xa0, 0x5a, 0x9a, 0x8a, 0x4b, 0x61,
	0xee, 0x23, 0x4c, 0x29, 0x93, 0x58, 0xfa, 0x8c, 0x0a, 0xad, 0x2b, 0x8d, 0xa7, 0x50, 0x37, 0xf0,
	0x09, 0x95, 0x31, 0x30, 0x57, 0xe8, 0x80, 0x63, 0xe9, 0xee, 0x6d, 0xef, 0x10, 0x1e, 0xb0, 0xa3,
	0x36, 0xa1, 0xd2, 0x94, 0x9a, 0xee, 0xa1, 0xd8, 0x67, 0x2d, 0x43, 0x9d, 0x8c, 0xa9, 0xea, 0xaf,
	0x56, 0x67, 0x17, 0x91, 0x36, 0x97, 0x47, 0x1a, 0x9c, 0xff, 0x32, 0x62, 0x8f, 0x3e, 0x11, 0x0d,
	0xa5, 0x7e, 0xa6, 0x43, 0x82, 0xf7, 0x96, 0x3d, 0xba, 0xfa, 0x92, 0xb8, 0x1d, 0x49, 0x36, 0xa2,
	0x62, 0xeb, 0xac, 0x05, 0xe6, 0x60, 0x51, 0x66, 0x98, 0xa3, 0x3e, 0x25, 0x2f, 0x3a, 0x44, 0xc8,
	0x52, 0xb9, 0x58, 0x61, 0xa8, 0xe5, 0x3b, 0xaf, 0x7f, 0xfc, 0x7a, 0x3b, 0x04, 0xcb, 0xd3, 0x91,
	0xf1, 0x57, 0x1c, 0x87, 0x84, 0xca, 0x65, 0x1e, 0xb2, 0x7d, 0xe2, 0x4a, 0x81, 0x2a, 0xc7, 0x3a,
	0xcc, 0x3a, 0x6b, 0x09, 0x87, 0xe8, 0x2e, 0x8e, 0x55, 0x01, 0x6f, 0x2c, 0xfb, 0xf2, 0x1a, 0x91,
	0x89, 0xb7, 0x99, 0xe2, 0x4e, 0x29, 0xda, 0x20, 0xbe, 0xe6, 0x4e, 0xeb, 0x97, 0x28, 0x6e, 0x13,
	0x65, 0xef, 0x26, 0xb8, 0xa1, 0xec, 0x45, 0x1f, 0x52, 0xe6, 0xba, 0xde, 0x50, 0xe5, 0x18, 0xbc,
	0xb3, 0xec, 0x2b, 0x0d, 0x4c, 0x5d, 0x12, 0x24, 0xb6, 0x50, 0x71, 0xa3, 0x2c, 0x73, 0x10, 0x67,
	0x35, 0x65, 0x69, 0xb6, 0x7c, 0xab, 0xa7, 0x25, 0xc7, 0x55, 0x4d, 0xa2, 0x03, 0xfb, 0x68, 0xd9,
	0x23, 0x8f, 0x7d, 0x91, 0x1c, 0x85, 0x00, 0xb0, 0xb8, 0x55, 0x86, 0x68, 0xac, 0xa1, 0xbe, 0xf9,
	0x82, 0x33, 0x2a, 0x48, 0x79, 0xfe, 0xb4, 0x3e, 0xac, 0xef, 0x33, 0x73, 0x86, 0x17, 0x5d, 0x31,
	0xf8, 0x69, 0xd9, 0x93, 0xe9, 0x6a, 0x0f, 0xa9, 0x90, 0x51, 0x86, 0x26, 0x91, 0xd8, 0x0f, 0x04,
	0x58, 0xea, 0xcf, 0x44, 0x4e, 0x66, 0x22, 0x2c, 0xff, 0xa3, 0x3a, 0x0e, 0xd4, 0xcc, 0x06, 0x5a,
	0x00, 0xb5, 0xf3, 0x03, 0x65, 0xee, 0x00, 0xf9, 0xb9, 0x08, 0x7f, 0x2c, 0x7b, 0xac, 0x11, 0x12,
	0x1c, 0xaf, 0x4b, 0x33, 0xd9, 0x6b, 0xb0, 0x78, 0xc1, 0xb4, 0x9c, 0x27, 0x30, 0xb1, 0xa6, 0x7b,
	0x0c, 0x4d, 0x57, 0x51, 0xe6, 0xa7, 0xf5, 0xdb, 0xda, 0xef, 0x4c, 0xfe, 0xdf, 0xca, 0x99, 0x0f,
	0xdb, 0xfe, 0x8e, 0xca, 0xb9, 0x14, 0x4f, 0x5a, 0xd1, 0xc5, 0x75, 0xcb, 0x0b, 0xe7, 0x6a, 0xbe,
	0x08, 0xf8, 0x6c, 0xd9, 0xc0, 0xac, 0x60, 0x2a, 0x6b, 0xad, 0xf7, 0xc2, 0xfe, 0x57, 0xd0, 0xbb,
	0xe9, 0xf5, 0xad, 0x80, 0x0b, 0x76, 0x25, 0x65, 0x3f, 0xda, 0xe2, 0xaf, 0x96, 0x7d, 0x2d, 0x19,
	0x86, 0x14, 0x06, 0x16, 0xfa, 0x18, 0x9e, 0x14, 0xdf, 0x78, 0x5e, 0x1c, 0x54, 0x16, 0x0f, 0xdb,
	0xbd, 0xec, 0xb0, 0x99, 0x08, 0x7d, 0x5c, 0x02, 0xf8, 0x60, 0xd9, 0x63, 0x4d, 0x12, 0x90, 0x81,
	0x26, 0xec, 0x5c, 0x81, 0x09, 0x71, 0xdd, 0xe8, 0xcc, 0x03, 0x02, 0x57, 0xa3, 0x07, 0x24, 0x77,
	0xca, 0x95, 0xbe, 0x4f, 0xb9, 0xf4, 0xe8, 0xa4, 0x3e, 0x9e, 0x74, 0xd7, 0xb5, 0x31, 0xf7, 0x05,
	0x74, 0x59, 0xfb, 0x7b, 0x1d, 0xee, 0x49, 0xc9, 0x85, 0x83, 0xd0, 0xe1, 0xe1, 0x61, 0x0e, 0x44,
	0xb8, 0x23, 0xf7, 0xf4, 0x8b, 0x37, 0xcb, 0x03, 0x2c, 0x77, 0x59, 0xd8, 0x5e, 0xf9, 0x66, 0xd9,
	0x53, 0x2e, 0x6b, 0x17, 0x66, 0x5b, 0x19, 0x31, 0xcf, 0xdb, 0x46, 0x64, 0xff, 0xf9, 0x83, 0x98,
	0xe8, 0xb1, 0x00, 0x53, 0x0f, 0xb2, 0xd0, 0x43, 0x1e, 0xa1, 0x2a, 0x1a, 0xea, 0xb6, 0x3b, 0xfb,
	0xae, 0xde, 0x37, 0xbf, 0x3f, 0x0d, 0x4d, 0xac, 0xe9, 0x12, 0x0d, 0xd5, 0xcb, 0x94, 0x87, 0x9b,
	0xd5, 0x13, 0x03, 0x6d, 0x29, 0x68, 0xcb, 0x40, 0x5b, 0x9b, 0xd5, 0xdf, 0x43, 0x93, 0x1a, 0x72,
	0x1c, 0x85, 0x39, 0x8e, 0x01, 0x1d, 0x67, 0xb3, 0xda, 0x1a, 0x56, 0x06, 0x6a, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x63, 0xdd, 0x7c, 0xc0, 0x8b, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OsConfigServiceClient is the client API for OsConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OsConfigServiceClient interface {
	// Patch VM instances by creating and running a patch job.
	ExecutePatchJob(ctx context.Context, in *ExecutePatchJobRequest, opts ...grpc.CallOption) (*PatchJob, error)
	// Get the patch job. This can be used to track the progress of an
	// ongoing patch job or review the details of completed jobs.
	GetPatchJob(ctx context.Context, in *GetPatchJobRequest, opts ...grpc.CallOption) (*PatchJob, error)
	// Cancel a patch job. The patch job must be active. Canceled patch jobs
	// cannot be restarted.
	CancelPatchJob(ctx context.Context, in *CancelPatchJobRequest, opts ...grpc.CallOption) (*PatchJob, error)
	// Get a list of patch jobs.
	ListPatchJobs(ctx context.Context, in *ListPatchJobsRequest, opts ...grpc.CallOption) (*ListPatchJobsResponse, error)
	// Get a list of instance details for a given patch job.
	ListPatchJobInstanceDetails(ctx context.Context, in *ListPatchJobInstanceDetailsRequest, opts ...grpc.CallOption) (*ListPatchJobInstanceDetailsResponse, error)
	// Create an OS Config patch deployment.
	CreatePatchDeployment(ctx context.Context, in *CreatePatchDeploymentRequest, opts ...grpc.CallOption) (*PatchDeployment, error)
	// Get an OS Config patch deployment.
	GetPatchDeployment(ctx context.Context, in *GetPatchDeploymentRequest, opts ...grpc.CallOption) (*PatchDeployment, error)
	// Get a page of OS Config patch deployments.
	ListPatchDeployments(ctx context.Context, in *ListPatchDeploymentsRequest, opts ...grpc.CallOption) (*ListPatchDeploymentsResponse, error)
	// Delete an OS Config patch deployment.
	DeletePatchDeployment(ctx context.Context, in *DeletePatchDeploymentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type osConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOsConfigServiceClient(cc grpc.ClientConnInterface) OsConfigServiceClient {
	return &osConfigServiceClient{cc}
}

func (c *osConfigServiceClient) ExecutePatchJob(ctx context.Context, in *ExecutePatchJobRequest, opts ...grpc.CallOption) (*PatchJob, error) {
	out := new(PatchJob)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1.OsConfigService/ExecutePatchJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) GetPatchJob(ctx context.Context, in *GetPatchJobRequest, opts ...grpc.CallOption) (*PatchJob, error) {
	out := new(PatchJob)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1.OsConfigService/GetPatchJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) CancelPatchJob(ctx context.Context, in *CancelPatchJobRequest, opts ...grpc.CallOption) (*PatchJob, error) {
	out := new(PatchJob)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1.OsConfigService/CancelPatchJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) ListPatchJobs(ctx context.Context, in *ListPatchJobsRequest, opts ...grpc.CallOption) (*ListPatchJobsResponse, error) {
	out := new(ListPatchJobsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1.OsConfigService/ListPatchJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) ListPatchJobInstanceDetails(ctx context.Context, in *ListPatchJobInstanceDetailsRequest, opts ...grpc.CallOption) (*ListPatchJobInstanceDetailsResponse, error) {
	out := new(ListPatchJobInstanceDetailsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1.OsConfigService/ListPatchJobInstanceDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) CreatePatchDeployment(ctx context.Context, in *CreatePatchDeploymentRequest, opts ...grpc.CallOption) (*PatchDeployment, error) {
	out := new(PatchDeployment)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1.OsConfigService/CreatePatchDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) GetPatchDeployment(ctx context.Context, in *GetPatchDeploymentRequest, opts ...grpc.CallOption) (*PatchDeployment, error) {
	out := new(PatchDeployment)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1.OsConfigService/GetPatchDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) ListPatchDeployments(ctx context.Context, in *ListPatchDeploymentsRequest, opts ...grpc.CallOption) (*ListPatchDeploymentsResponse, error) {
	out := new(ListPatchDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1.OsConfigService/ListPatchDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) DeletePatchDeployment(ctx context.Context, in *DeletePatchDeploymentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1.OsConfigService/DeletePatchDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OsConfigServiceServer is the server API for OsConfigService service.
type OsConfigServiceServer interface {
	// Patch VM instances by creating and running a patch job.
	ExecutePatchJob(context.Context, *ExecutePatchJobRequest) (*PatchJob, error)
	// Get the patch job. This can be used to track the progress of an
	// ongoing patch job or review the details of completed jobs.
	GetPatchJob(context.Context, *GetPatchJobRequest) (*PatchJob, error)
	// Cancel a patch job. The patch job must be active. Canceled patch jobs
	// cannot be restarted.
	CancelPatchJob(context.Context, *CancelPatchJobRequest) (*PatchJob, error)
	// Get a list of patch jobs.
	ListPatchJobs(context.Context, *ListPatchJobsRequest) (*ListPatchJobsResponse, error)
	// Get a list of instance details for a given patch job.
	ListPatchJobInstanceDetails(context.Context, *ListPatchJobInstanceDetailsRequest) (*ListPatchJobInstanceDetailsResponse, error)
	// Create an OS Config patch deployment.
	CreatePatchDeployment(context.Context, *CreatePatchDeploymentRequest) (*PatchDeployment, error)
	// Get an OS Config patch deployment.
	GetPatchDeployment(context.Context, *GetPatchDeploymentRequest) (*PatchDeployment, error)
	// Get a page of OS Config patch deployments.
	ListPatchDeployments(context.Context, *ListPatchDeploymentsRequest) (*ListPatchDeploymentsResponse, error)
	// Delete an OS Config patch deployment.
	DeletePatchDeployment(context.Context, *DeletePatchDeploymentRequest) (*empty.Empty, error)
}

// UnimplementedOsConfigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOsConfigServiceServer struct {
}

func (*UnimplementedOsConfigServiceServer) ExecutePatchJob(ctx context.Context, req *ExecutePatchJobRequest) (*PatchJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePatchJob not implemented")
}
func (*UnimplementedOsConfigServiceServer) GetPatchJob(ctx context.Context, req *GetPatchJobRequest) (*PatchJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatchJob not implemented")
}
func (*UnimplementedOsConfigServiceServer) CancelPatchJob(ctx context.Context, req *CancelPatchJobRequest) (*PatchJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPatchJob not implemented")
}
func (*UnimplementedOsConfigServiceServer) ListPatchJobs(ctx context.Context, req *ListPatchJobsRequest) (*ListPatchJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPatchJobs not implemented")
}
func (*UnimplementedOsConfigServiceServer) ListPatchJobInstanceDetails(ctx context.Context, req *ListPatchJobInstanceDetailsRequest) (*ListPatchJobInstanceDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPatchJobInstanceDetails not implemented")
}
func (*UnimplementedOsConfigServiceServer) CreatePatchDeployment(ctx context.Context, req *CreatePatchDeploymentRequest) (*PatchDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePatchDeployment not implemented")
}
func (*UnimplementedOsConfigServiceServer) GetPatchDeployment(ctx context.Context, req *GetPatchDeploymentRequest) (*PatchDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatchDeployment not implemented")
}
func (*UnimplementedOsConfigServiceServer) ListPatchDeployments(ctx context.Context, req *ListPatchDeploymentsRequest) (*ListPatchDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPatchDeployments not implemented")
}
func (*UnimplementedOsConfigServiceServer) DeletePatchDeployment(ctx context.Context, req *DeletePatchDeploymentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePatchDeployment not implemented")
}

func RegisterOsConfigServiceServer(s *grpc.Server, srv OsConfigServiceServer) {
	s.RegisterService(&_OsConfigService_serviceDesc, srv)
}

func _OsConfigService_ExecutePatchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutePatchJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).ExecutePatchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1.OsConfigService/ExecutePatchJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).ExecutePatchJob(ctx, req.(*ExecutePatchJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_GetPatchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatchJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).GetPatchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1.OsConfigService/GetPatchJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).GetPatchJob(ctx, req.(*GetPatchJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_CancelPatchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPatchJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).CancelPatchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1.OsConfigService/CancelPatchJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).CancelPatchJob(ctx, req.(*CancelPatchJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_ListPatchJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPatchJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).ListPatchJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1.OsConfigService/ListPatchJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).ListPatchJobs(ctx, req.(*ListPatchJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_ListPatchJobInstanceDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPatchJobInstanceDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).ListPatchJobInstanceDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1.OsConfigService/ListPatchJobInstanceDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).ListPatchJobInstanceDetails(ctx, req.(*ListPatchJobInstanceDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_CreatePatchDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePatchDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).CreatePatchDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1.OsConfigService/CreatePatchDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).CreatePatchDeployment(ctx, req.(*CreatePatchDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_GetPatchDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatchDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).GetPatchDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1.OsConfigService/GetPatchDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).GetPatchDeployment(ctx, req.(*GetPatchDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_ListPatchDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPatchDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).ListPatchDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1.OsConfigService/ListPatchDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).ListPatchDeployments(ctx, req.(*ListPatchDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_DeletePatchDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePatchDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).DeletePatchDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1.OsConfigService/DeletePatchDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).DeletePatchDeployment(ctx, req.(*DeletePatchDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OsConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.osconfig.v1.OsConfigService",
	HandlerType: (*OsConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecutePatchJob",
			Handler:    _OsConfigService_ExecutePatchJob_Handler,
		},
		{
			MethodName: "GetPatchJob",
			Handler:    _OsConfigService_GetPatchJob_Handler,
		},
		{
			MethodName: "CancelPatchJob",
			Handler:    _OsConfigService_CancelPatchJob_Handler,
		},
		{
			MethodName: "ListPatchJobs",
			Handler:    _OsConfigService_ListPatchJobs_Handler,
		},
		{
			MethodName: "ListPatchJobInstanceDetails",
			Handler:    _OsConfigService_ListPatchJobInstanceDetails_Handler,
		},
		{
			MethodName: "CreatePatchDeployment",
			Handler:    _OsConfigService_CreatePatchDeployment_Handler,
		},
		{
			MethodName: "GetPatchDeployment",
			Handler:    _OsConfigService_GetPatchDeployment_Handler,
		},
		{
			MethodName: "ListPatchDeployments",
			Handler:    _OsConfigService_ListPatchDeployments_Handler,
		},
		{
			MethodName: "DeletePatchDeployment",
			Handler:    _OsConfigService_DeletePatchDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/osconfig/v1/osconfig_service.proto",
}
