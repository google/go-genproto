// Code generated by protoc-gen-go.
// source: google.golang.org/genproto/googleapis/devtools/clouderrorreporting/v1beta1/error_group_service.proto
// DO NOT EDIT!

package google_devtools_clouderrorreporting_v1beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/serviceconfig"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A request to return an individual group.
type GetGroupRequest struct {
	// [Required] The group resource name. Written as
	// <code>projects/<var>projectID</var>/groups/<var>group_name</var></code>.
	// Call
	// <a href="/error-reporting/reference/rest/v1beta1/projects.groupStats/list">
	// <code>groupStats.list</code></a> to return a list of groups belonging to
	// this project.
	//
	// Example: <code>projects/my-project-123/groups/my-group</code>
	GroupName string `protobuf:"bytes,1,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
}

func (m *GetGroupRequest) Reset()                    { *m = GetGroupRequest{} }
func (m *GetGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGroupRequest) ProtoMessage()               {}
func (*GetGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// A request to replace the existing data for the given group.
type UpdateGroupRequest struct {
	// [Required] The group which replaces the resource on the server.
	Group *ErrorGroup `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
}

func (m *UpdateGroupRequest) Reset()                    { *m = UpdateGroupRequest{} }
func (m *UpdateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupRequest) ProtoMessage()               {}
func (*UpdateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *UpdateGroupRequest) GetGroup() *ErrorGroup {
	if m != nil {
		return m.Group
	}
	return nil
}

func init() {
	proto.RegisterType((*GetGroupRequest)(nil), "google.devtools.clouderrorreporting.v1beta1.GetGroupRequest")
	proto.RegisterType((*UpdateGroupRequest)(nil), "google.devtools.clouderrorreporting.v1beta1.UpdateGroupRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ErrorGroupService service

type ErrorGroupServiceClient interface {
	// Get the specified group.
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*ErrorGroup, error)
	// Replace the data for the specified group.
	// Fails if the group does not exist.
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*ErrorGroup, error)
}

type errorGroupServiceClient struct {
	cc *grpc.ClientConn
}

func NewErrorGroupServiceClient(cc *grpc.ClientConn) ErrorGroupServiceClient {
	return &errorGroupServiceClient{cc}
}

func (c *errorGroupServiceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*ErrorGroup, error) {
	out := new(ErrorGroup)
	err := grpc.Invoke(ctx, "/google.devtools.clouderrorreporting.v1beta1.ErrorGroupService/GetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorGroupServiceClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*ErrorGroup, error) {
	out := new(ErrorGroup)
	err := grpc.Invoke(ctx, "/google.devtools.clouderrorreporting.v1beta1.ErrorGroupService/UpdateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ErrorGroupService service

type ErrorGroupServiceServer interface {
	// Get the specified group.
	GetGroup(context.Context, *GetGroupRequest) (*ErrorGroup, error)
	// Replace the data for the specified group.
	// Fails if the group does not exist.
	UpdateGroup(context.Context, *UpdateGroupRequest) (*ErrorGroup, error)
}

func RegisterErrorGroupServiceServer(s *grpc.Server, srv ErrorGroupServiceServer) {
	s.RegisterService(&_ErrorGroupService_serviceDesc, srv)
}

func _ErrorGroupService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorGroupServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.clouderrorreporting.v1beta1.ErrorGroupService/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorGroupServiceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorGroupService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorGroupServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.clouderrorreporting.v1beta1.ErrorGroupService/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorGroupServiceServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ErrorGroupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.devtools.clouderrorreporting.v1beta1.ErrorGroupService",
	HandlerType: (*ErrorGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroup",
			Handler:    _ErrorGroupService_GetGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _ErrorGroupService_UpdateGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

func init() {
	proto.RegisterFile("google.golang.org/genproto/googleapis/devtools/clouderrorreporting/v1beta1/error_group_service.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x52, 0x4d, 0x4a, 0xc3, 0x40,
	0x14, 0x26, 0x8a, 0x62, 0xa7, 0x0b, 0x71, 0x16, 0x22, 0x01, 0x41, 0xba, 0x52, 0x0b, 0x33, 0xb6,
	0x2e, 0x14, 0x51, 0x84, 0x82, 0x14, 0x11, 0xa5, 0x54, 0xc4, 0x65, 0x99, 0x26, 0xcf, 0x21, 0x92,
	0xce, 0x8b, 0x93, 0x69, 0x37, 0xe2, 0xc6, 0x03, 0xb8, 0xf1, 0x2a, 0x5e, 0xc0, 0x33, 0x78, 0x05,
	0x0f, 0x62, 0x32, 0xd3, 0x5a, 0x6d, 0x15, 0x4c, 0x71, 0x13, 0xc2, 0x97, 0x97, 0xef, 0xef, 0x3d,
	0x12, 0x4a, 0x44, 0x19, 0x03, 0x93, 0x18, 0x0b, 0x25, 0x19, 0x6a, 0xc9, 0x25, 0xa8, 0x44, 0xa3,
	0x41, 0xee, 0x3e, 0x89, 0x24, 0x4a, 0x79, 0x08, 0x03, 0x83, 0x18, 0xa7, 0x3c, 0x88, 0xb1, 0x1f,
	0x82, 0xd6, 0xa8, 0x35, 0x24, 0xa8, 0x4d, 0xa4, 0x24, 0x1f, 0xd4, 0xba, 0x60, 0x44, 0x8d, 0x5b,
	0xb8, 0x23, 0x35, 0xf6, 0x93, 0x4e, 0x0a, 0x7a, 0x10, 0x05, 0xc0, 0x2c, 0x13, 0xad, 0x0e, 0x55,
	0x46, 0x34, 0xec, 0x07, 0x1a, 0x36, 0xa4, 0xf1, 0x4f, 0xff, 0x66, 0x29, 0x7b, 0xf0, 0xa1, 0x4a,
	0x80, 0xea, 0x26, 0x92, 0x5c, 0x28, 0x85, 0x46, 0x98, 0x08, 0x55, 0xea, 0x74, 0xfd, 0xeb, 0x7f,
	0x4c, 0x17, 0x60, 0xaf, 0x87, 0xca, 0x11, 0x57, 0x76, 0xc8, 0x72, 0x13, 0x4c, 0x33, 0x8f, 0xda,
	0x86, 0xbb, 0x3e, 0xa4, 0x86, 0xae, 0x13, 0xe2, 0xa2, 0x2b, 0xd1, 0x83, 0x35, 0x6f, 0xc3, 0xdb,
	0x2c, 0xb5, 0x4b, 0x16, 0xb9, 0xc8, 0x80, 0x4a, 0x40, 0xe8, 0x55, 0x12, 0x0a, 0x03, 0xdf, 0x7e,
	0x3a, 0x27, 0x0b, 0x76, 0xc4, 0xce, 0x97, 0xeb, 0x7b, 0xac, 0x40, 0x51, 0xec, 0x24, 0x87, 0x1d,
	0x9d, 0x63, 0xa9, 0x3f, 0xcd, 0x93, 0x95, 0x31, 0x7a, 0xe9, 0xda, 0xa1, 0x2f, 0x1e, 0x59, 0x1a,
	0xb9, 0xa5, 0x87, 0x85, 0x24, 0x26, 0x42, 0xfa, 0xb3, 0x1a, 0xac, 0xd4, 0x1e, 0xdf, 0xde, 0x9f,
	0xe7, 0xaa, 0x74, 0xeb, 0xb3, 0xcf, 0xfb, 0x71, 0x5b, 0x47, 0x59, 0xa9, 0xb7, 0x10, 0x98, 0x94,
	0x6f, 0x73, 0x8b, 0x66, 0x2f, 0x0f, 0xf4, 0xd5, 0x23, 0xe5, 0x2f, 0x95, 0xd1, 0xe3, 0x42, 0xda,
	0xd3, 0x65, 0xcf, 0x6e, 0x7e, 0xdf, 0x9a, 0xaf, 0xfb, 0x93, 0xe6, 0xd9, 0xaf, 0xe6, 0x0f, 0xdc,
	0x42, 0x1a, 0x67, 0x24, 0xbf, 0x9b, 0x22, 0xba, 0x8d, 0xd5, 0xa9, 0x05, 0xb6, 0xf2, 0x93, 0x6b,
	0x79, 0xdd, 0x45, 0x7b, 0x7b, 0xbb, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x68, 0x09, 0x8a,
	0xb4, 0x03, 0x00, 0x00,
}
