// Code generated by protoc-gen-go.
// source: google.golang.org/genproto/googleapis/devtools/cloudbuild/v1/cloudbuild.proto
// DO NOT EDIT!

/*
Package google_devtools_cloudbuild_v1 is a generated protocol buffer package.

It is generated from these files:
	google.golang.org/genproto/googleapis/devtools/cloudbuild/v1/cloudbuild.proto

It has these top-level messages:
	StorageSource
	RepoSource
	Source
	BuiltImage
	BuildStep
	Results
	Build
	BuildOperationMetadata
	SourceProvenance
	FileHashes
	Hash
	CreateBuildRequest
	GetBuildRequest
	ListBuildsRequest
	ListBuildsResponse
	CancelBuildRequest
	BuildOptions
*/
package google_devtools_cloudbuild_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/serviceconfig"
import _ "google.golang.org/genproto/googleapis/devtools/source/v1"
import google_longrunning "google.golang.org/genproto/googleapis/longrunning"
import google_protobuf3 "github.com/golang/protobuf/ptypes/duration"
import _ "github.com/golang/protobuf/ptypes/empty"
import google_protobuf4 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Possible status of a build.
type Build_Status int32

const (
	// Status of the build is unknown.
	Build_STATUS_UNKNOWN Build_Status = 0
	// Build has been received and is being queued.
	Build_QUEUING Build_Status = 8
	// Build is queued; work has not yet begun.
	Build_QUEUED Build_Status = 1
	// Build is being executed.
	Build_WORKING Build_Status = 2
	// Build finished successfully.
	Build_SUCCESS Build_Status = 3
	// Build failed to complete successfully.
	Build_FAILURE Build_Status = 4
	// Build failed due to an internal cause.
	Build_INTERNAL_ERROR Build_Status = 5
	// Build took longer than was allowed.
	Build_TIMEOUT Build_Status = 6
	// Build was canceled by a user.
	Build_CANCELLED Build_Status = 7
)

var Build_Status_name = map[int32]string{
	0: "STATUS_UNKNOWN",
	8: "QUEUING",
	1: "QUEUED",
	2: "WORKING",
	3: "SUCCESS",
	4: "FAILURE",
	5: "INTERNAL_ERROR",
	6: "TIMEOUT",
	7: "CANCELLED",
}
var Build_Status_value = map[string]int32{
	"STATUS_UNKNOWN": 0,
	"QUEUING":        8,
	"QUEUED":         1,
	"WORKING":        2,
	"SUCCESS":        3,
	"FAILURE":        4,
	"INTERNAL_ERROR": 5,
	"TIMEOUT":        6,
	"CANCELLED":      7,
}

func (x Build_Status) String() string {
	return proto.EnumName(Build_Status_name, int32(x))
}
func (Build_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

// Specifies the hash algorithm, if any.
type Hash_HashType int32

const (
	// No hash requested.
	Hash_NONE Hash_HashType = 0
	// Use a sha256 hash.
	Hash_SHA256 Hash_HashType = 1
)

var Hash_HashType_name = map[int32]string{
	0: "NONE",
	1: "SHA256",
}
var Hash_HashType_value = map[string]int32{
	"NONE":   0,
	"SHA256": 1,
}

func (x Hash_HashType) String() string {
	return proto.EnumName(Hash_HashType_name, int32(x))
}
func (Hash_HashType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

// Specifies the manner in which the build should be verified, if at all.
type BuildOptions_VerifyOption int32

const (
	// Not a verifiable build. (default)
	BuildOptions_NOT_VERIFIED BuildOptions_VerifyOption = 0
	// Verified build.
	BuildOptions_VERIFIED BuildOptions_VerifyOption = 1
)

var BuildOptions_VerifyOption_name = map[int32]string{
	0: "NOT_VERIFIED",
	1: "VERIFIED",
}
var BuildOptions_VerifyOption_value = map[string]int32{
	"NOT_VERIFIED": 0,
	"VERIFIED":     1,
}

func (x BuildOptions_VerifyOption) String() string {
	return proto.EnumName(BuildOptions_VerifyOption_name, int32(x))
}
func (BuildOptions_VerifyOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{16, 0}
}

// StorageSource describes the location of the source in an archive file in
// Google Cloud Storage.
type StorageSource struct {
	// Google Cloud Storage bucket containing source (see
	// [Bucket Name
	// Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket string `protobuf:"bytes,1,opt,name=bucket" json:"bucket,omitempty"`
	// Google Cloud Storage object containing source.
	//
	// This object must be a gzipped archive file (.tar.gz) containing source to
	// build.
	Object string `protobuf:"bytes,2,opt,name=object" json:"object,omitempty"`
	// Google Cloud Storage generation for the object. If the generation is
	// omitted, the latest generation will be used.
	Generation int64 `protobuf:"varint,3,opt,name=generation" json:"generation,omitempty"`
}

func (m *StorageSource) Reset()                    { *m = StorageSource{} }
func (m *StorageSource) String() string            { return proto.CompactTextString(m) }
func (*StorageSource) ProtoMessage()               {}
func (*StorageSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// RepoSource describes the location of the source in a Google Cloud Source
// Repository.
type RepoSource struct {
	// ID of the project that owns the repo. If omitted, the project ID requesting
	// the build is assumed.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// Name of the repo. If omitted, the name "default" is assumed.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName" json:"repo_name,omitempty"`
	// A revision within the source repository must be specified in
	// one of these ways.
	//
	// Types that are valid to be assigned to Revision:
	//	*RepoSource_BranchName
	//	*RepoSource_TagName
	//	*RepoSource_CommitSha
	Revision isRepoSource_Revision `protobuf_oneof:"revision"`
}

func (m *RepoSource) Reset()                    { *m = RepoSource{} }
func (m *RepoSource) String() string            { return proto.CompactTextString(m) }
func (*RepoSource) ProtoMessage()               {}
func (*RepoSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isRepoSource_Revision interface {
	isRepoSource_Revision()
}

type RepoSource_BranchName struct {
	BranchName string `protobuf:"bytes,3,opt,name=branch_name,json=branchName,oneof"`
}
type RepoSource_TagName struct {
	TagName string `protobuf:"bytes,4,opt,name=tag_name,json=tagName,oneof"`
}
type RepoSource_CommitSha struct {
	CommitSha string `protobuf:"bytes,5,opt,name=commit_sha,json=commitSha,oneof"`
}

func (*RepoSource_BranchName) isRepoSource_Revision() {}
func (*RepoSource_TagName) isRepoSource_Revision()    {}
func (*RepoSource_CommitSha) isRepoSource_Revision()  {}

func (m *RepoSource) GetRevision() isRepoSource_Revision {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *RepoSource) GetBranchName() string {
	if x, ok := m.GetRevision().(*RepoSource_BranchName); ok {
		return x.BranchName
	}
	return ""
}

func (m *RepoSource) GetTagName() string {
	if x, ok := m.GetRevision().(*RepoSource_TagName); ok {
		return x.TagName
	}
	return ""
}

func (m *RepoSource) GetCommitSha() string {
	if x, ok := m.GetRevision().(*RepoSource_CommitSha); ok {
		return x.CommitSha
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RepoSource) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RepoSource_OneofMarshaler, _RepoSource_OneofUnmarshaler, _RepoSource_OneofSizer, []interface{}{
		(*RepoSource_BranchName)(nil),
		(*RepoSource_TagName)(nil),
		(*RepoSource_CommitSha)(nil),
	}
}

func _RepoSource_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RepoSource)
	// revision
	switch x := m.Revision.(type) {
	case *RepoSource_BranchName:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.BranchName)
	case *RepoSource_TagName:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.TagName)
	case *RepoSource_CommitSha:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.CommitSha)
	case nil:
	default:
		return fmt.Errorf("RepoSource.Revision has unexpected type %T", x)
	}
	return nil
}

func _RepoSource_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RepoSource)
	switch tag {
	case 3: // revision.branch_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Revision = &RepoSource_BranchName{x}
		return true, err
	case 4: // revision.tag_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Revision = &RepoSource_TagName{x}
		return true, err
	case 5: // revision.commit_sha
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Revision = &RepoSource_CommitSha{x}
		return true, err
	default:
		return false, nil
	}
}

func _RepoSource_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RepoSource)
	// revision
	switch x := m.Revision.(type) {
	case *RepoSource_BranchName:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BranchName)))
		n += len(x.BranchName)
	case *RepoSource_TagName:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.TagName)))
		n += len(x.TagName)
	case *RepoSource_CommitSha:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.CommitSha)))
		n += len(x.CommitSha)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Source describes the location of the source in a supported storage
// service.
type Source struct {
	// Describes location of source.
	//
	// Types that are valid to be assigned to Source:
	//	*Source_StorageSource
	//	*Source_RepoSource
	Source isSource_Source `protobuf_oneof:"source"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isSource_Source interface {
	isSource_Source()
}

type Source_StorageSource struct {
	StorageSource *StorageSource `protobuf:"bytes,2,opt,name=storage_source,json=storageSource,oneof"`
}
type Source_RepoSource struct {
	RepoSource *RepoSource `protobuf:"bytes,3,opt,name=repo_source,json=repoSource,oneof"`
}

func (*Source_StorageSource) isSource_Source() {}
func (*Source_RepoSource) isSource_Source()    {}

func (m *Source) GetSource() isSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Source) GetStorageSource() *StorageSource {
	if x, ok := m.GetSource().(*Source_StorageSource); ok {
		return x.StorageSource
	}
	return nil
}

func (m *Source) GetRepoSource() *RepoSource {
	if x, ok := m.GetSource().(*Source_RepoSource); ok {
		return x.RepoSource
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Source) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Source_OneofMarshaler, _Source_OneofUnmarshaler, _Source_OneofSizer, []interface{}{
		(*Source_StorageSource)(nil),
		(*Source_RepoSource)(nil),
	}
}

func _Source_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Source)
	// source
	switch x := m.Source.(type) {
	case *Source_StorageSource:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StorageSource); err != nil {
			return err
		}
	case *Source_RepoSource:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RepoSource); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Source.Source has unexpected type %T", x)
	}
	return nil
}

func _Source_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Source)
	switch tag {
	case 2: // source.storage_source
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StorageSource)
		err := b.DecodeMessage(msg)
		m.Source = &Source_StorageSource{msg}
		return true, err
	case 3: // source.repo_source
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RepoSource)
		err := b.DecodeMessage(msg)
		m.Source = &Source_RepoSource{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Source_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Source)
	// source
	switch x := m.Source.(type) {
	case *Source_StorageSource:
		s := proto.Size(x.StorageSource)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Source_RepoSource:
		s := proto.Size(x.RepoSource)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// BuiltImage describes an image built by the pipeline.
type BuiltImage struct {
	// Name used to push the container image to Google Container Registry, as
	// presented to `docker push`.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Docker Registry 2.0 digest.
	Digest string `protobuf:"bytes,3,opt,name=digest" json:"digest,omitempty"`
}

func (m *BuiltImage) Reset()                    { *m = BuiltImage{} }
func (m *BuiltImage) String() string            { return proto.CompactTextString(m) }
func (*BuiltImage) ProtoMessage()               {}
func (*BuiltImage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// BuildStep describes a step to perform in the build pipeline.
type BuildStep struct {
	// Name of the container image to use for creating this stage in the
	// pipeline, as presented to `docker pull`.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Additional environment variables to set for this step's container.
	Env []string `protobuf:"bytes,2,rep,name=env" json:"env,omitempty"`
	// Command-line arguments to use when running this step's container.
	Args []string `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	// Working directory (relative to project source root) to use when running
	// this operation's container.
	Dir string `protobuf:"bytes,4,opt,name=dir" json:"dir,omitempty"`
	// Optional unique identifier for this build step, used in wait_for to
	// reference this build step as a dependency.
	Id string `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	// The ID(s) of the step(s) that this build step depends on.
	// This build step will not start until all the build steps in wait_for
	// have completed successfully. If wait_for is empty, this build step will
	// start when all previous build steps in the Build.Steps list have completed
	// successfully.
	WaitFor []string `protobuf:"bytes,6,rep,name=wait_for,json=waitFor" json:"wait_for,omitempty"`
}

func (m *BuildStep) Reset()                    { *m = BuildStep{} }
func (m *BuildStep) String() string            { return proto.CompactTextString(m) }
func (*BuildStep) ProtoMessage()               {}
func (*BuildStep) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// Results describes the artifacts created by the build pipeline.
type Results struct {
	// Images that were built as a part of the build.
	Images []*BuiltImage `protobuf:"bytes,2,rep,name=images" json:"images,omitempty"`
	// List of build step digests, in order corresponding to build step indices.
	// next id = 4
	BuildStepImages []string `protobuf:"bytes,3,rep,name=build_step_images,json=buildStepImages" json:"build_step_images,omitempty"`
}

func (m *Results) Reset()                    { *m = Results{} }
func (m *Results) String() string            { return proto.CompactTextString(m) }
func (*Results) ProtoMessage()               {}
func (*Results) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Results) GetImages() []*BuiltImage {
	if m != nil {
		return m.Images
	}
	return nil
}

// A build resource in the Container Builder API.
//
// At a high level, a Build describes where to find source code, how to build
// it (for example, the builder image to run on the source), and what tag to
// apply to the built image when it is pushed to Google Container Registry.
type Build struct {
	// Unique identifier of the build.
	// @OutputOnly
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// ID of the project.
	// @OutputOnly.
	ProjectId string `protobuf:"bytes,16,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// Status of the build.
	// @OutputOnly
	Status Build_Status `protobuf:"varint,2,opt,name=status,enum=google.devtools.cloudbuild.v1.Build_Status" json:"status,omitempty"`
	// Customer-readable message about the current status.
	// @OutputOnly
	StatusDetail string `protobuf:"bytes,24,opt,name=status_detail,json=statusDetail" json:"status_detail,omitempty"`
	// Describes where to find the source files to build.
	Source *Source `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	// Describes the operations to be performed on the workspace.
	Steps []*BuildStep `protobuf:"bytes,11,rep,name=steps" json:"steps,omitempty"`
	// Results of the build.
	// @OutputOnly
	Results *Results `protobuf:"bytes,10,opt,name=results" json:"results,omitempty"`
	// Time at which the build was created.
	// @OutputOnly
	CreateTime *google_protobuf4.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// Time at which execution of the build was started.
	// @OutputOnly
	StartTime *google_protobuf4.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// Time at which execution of the build was finished.
	// @OutputOnly
	FinishTime *google_protobuf4.Timestamp `protobuf:"bytes,8,opt,name=finish_time,json=finishTime" json:"finish_time,omitempty"`
	// Amount of time that this build should be allowed to run, to second
	// granularity. If this amount of time elapses, work on the build will cease
	// and the build status will be TIMEOUT.
	//
	// Default time is ten minutes.
	Timeout *google_protobuf3.Duration `protobuf:"bytes,12,opt,name=timeout" json:"timeout,omitempty"`
	// List of images expected to be built and pushed to Google Container
	// Registry. If an image is listed here and the image is not produced by
	// one of the build steps, the build will fail. Any images present when
	// the build steps are complete will be pushed to Container Registry.
	Images []string `protobuf:"bytes,13,rep,name=images" json:"images,omitempty"`
	// Google Cloud Storage bucket where logs should be written (see
	// [Bucket Name
	// Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	// Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
	LogsBucket string `protobuf:"bytes,19,opt,name=logs_bucket,json=logsBucket" json:"logs_bucket,omitempty"`
	// A permanent fixed identifier for source.
	// @OutputOnly
	SourceProvenance *SourceProvenance `protobuf:"bytes,21,opt,name=source_provenance,json=sourceProvenance" json:"source_provenance,omitempty"`
	// Special options for this build.
	Options *BuildOptions `protobuf:"bytes,23,opt,name=options" json:"options,omitempty"`
	// URL to logs for this build in Google Cloud Logging.
	// @OutputOnly
	LogUrl string `protobuf:"bytes,25,opt,name=log_url,json=logUrl" json:"log_url,omitempty"`
}

func (m *Build) Reset()                    { *m = Build{} }
func (m *Build) String() string            { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()               {}
func (*Build) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Build) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Build) GetSteps() []*BuildStep {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *Build) GetResults() *Results {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *Build) GetCreateTime() *google_protobuf4.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Build) GetStartTime() *google_protobuf4.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Build) GetFinishTime() *google_protobuf4.Timestamp {
	if m != nil {
		return m.FinishTime
	}
	return nil
}

func (m *Build) GetTimeout() *google_protobuf3.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *Build) GetSourceProvenance() *SourceProvenance {
	if m != nil {
		return m.SourceProvenance
	}
	return nil
}

func (m *Build) GetOptions() *BuildOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// Metadata for build operations.
type BuildOperationMetadata struct {
	// The build that the operation is tracking.
	Build *Build `protobuf:"bytes,1,opt,name=build" json:"build,omitempty"`
}

func (m *BuildOperationMetadata) Reset()                    { *m = BuildOperationMetadata{} }
func (m *BuildOperationMetadata) String() string            { return proto.CompactTextString(m) }
func (*BuildOperationMetadata) ProtoMessage()               {}
func (*BuildOperationMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BuildOperationMetadata) GetBuild() *Build {
	if m != nil {
		return m.Build
	}
	return nil
}

// Provenance of the source. Ways to find the original source, or verify that
// some source was used for this build.
type SourceProvenance struct {
	// A copy of the build's source.storage_source, if exists, with any
	// generations resolved.
	ResolvedStorageSource *StorageSource `protobuf:"bytes,3,opt,name=resolved_storage_source,json=resolvedStorageSource" json:"resolved_storage_source,omitempty"`
	// A copy of the build's source.repo_source, if exists, with any
	// revisions resolved.
	ResolvedRepoSource *RepoSource `protobuf:"bytes,6,opt,name=resolved_repo_source,json=resolvedRepoSource" json:"resolved_repo_source,omitempty"`
	// Hash(es) of the build source, which can be used to verify that the original
	// source integrity was maintained in the build. Note that FileHashes will
	// only be populated if BuildOptions has requested a SourceProvenanceHash.
	//
	// The keys to this map are file paths used as build source and the values
	// contain the hash values for those files.
	//
	// If the build source came in a single package such as a gzipped tarfile
	// (.tar.gz), the FileHash will be for the single path to that file.
	// @OutputOnly
	FileHashes map[string]*FileHashes `protobuf:"bytes,4,rep,name=file_hashes,json=fileHashes" json:"file_hashes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SourceProvenance) Reset()                    { *m = SourceProvenance{} }
func (m *SourceProvenance) String() string            { return proto.CompactTextString(m) }
func (*SourceProvenance) ProtoMessage()               {}
func (*SourceProvenance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SourceProvenance) GetResolvedStorageSource() *StorageSource {
	if m != nil {
		return m.ResolvedStorageSource
	}
	return nil
}

func (m *SourceProvenance) GetResolvedRepoSource() *RepoSource {
	if m != nil {
		return m.ResolvedRepoSource
	}
	return nil
}

func (m *SourceProvenance) GetFileHashes() map[string]*FileHashes {
	if m != nil {
		return m.FileHashes
	}
	return nil
}

// Container message for hashes of byte content of files, used in
// SourceProvenance messages to verify integrity of source input to the build.
type FileHashes struct {
	// Collection of file hashes.
	FileHash []*Hash `protobuf:"bytes,1,rep,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
}

func (m *FileHashes) Reset()                    { *m = FileHashes{} }
func (m *FileHashes) String() string            { return proto.CompactTextString(m) }
func (*FileHashes) ProtoMessage()               {}
func (*FileHashes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FileHashes) GetFileHash() []*Hash {
	if m != nil {
		return m.FileHash
	}
	return nil
}

// Container message for hash values.
type Hash struct {
	// The type of hash that was performed.
	Type Hash_HashType `protobuf:"varint,1,opt,name=type,enum=google.devtools.cloudbuild.v1.Hash_HashType" json:"type,omitempty"`
	// The hash value.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Hash) Reset()                    { *m = Hash{} }
func (m *Hash) String() string            { return proto.CompactTextString(m) }
func (*Hash) ProtoMessage()               {}
func (*Hash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// Request to create a new build.
type CreateBuildRequest struct {
	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// Build resource to create.
	Build *Build `protobuf:"bytes,2,opt,name=build" json:"build,omitempty"`
}

func (m *CreateBuildRequest) Reset()                    { *m = CreateBuildRequest{} }
func (m *CreateBuildRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateBuildRequest) ProtoMessage()               {}
func (*CreateBuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CreateBuildRequest) GetBuild() *Build {
	if m != nil {
		return m.Build
	}
	return nil
}

// Request to get a build.
type GetBuildRequest struct {
	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// ID of the build.
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *GetBuildRequest) Reset()                    { *m = GetBuildRequest{} }
func (m *GetBuildRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBuildRequest) ProtoMessage()               {}
func (*GetBuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

// Request to list builds.
type ListBuildsRequest struct {
	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// Number of results to return in the list.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// Token to provide to skip to a particular spot in the list.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
}

func (m *ListBuildsRequest) Reset()                    { *m = ListBuildsRequest{} }
func (m *ListBuildsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBuildsRequest) ProtoMessage()               {}
func (*ListBuildsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// Response including listed builds.
type ListBuildsResponse struct {
	// Builds will be sorted by create_time, descending.
	Builds []*Build `protobuf:"bytes,1,rep,name=builds" json:"builds,omitempty"`
	// Token to receive the next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *ListBuildsResponse) Reset()                    { *m = ListBuildsResponse{} }
func (m *ListBuildsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListBuildsResponse) ProtoMessage()               {}
func (*ListBuildsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListBuildsResponse) GetBuilds() []*Build {
	if m != nil {
		return m.Builds
	}
	return nil
}

// Request to cancel an ongoing build.
type CancelBuildRequest struct {
	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// ID of the build.
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *CancelBuildRequest) Reset()                    { *m = CancelBuildRequest{} }
func (m *CancelBuildRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelBuildRequest) ProtoMessage()               {}
func (*CancelBuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

// Optional arguments to enable specific features of builds.
type BuildOptions struct {
	// Requested hash for SourceProvenance.
	SourceProvenanceHash []Hash_HashType `protobuf:"varint,1,rep,name=source_provenance_hash,json=sourceProvenanceHash,enum=google.devtools.cloudbuild.v1.Hash_HashType" json:"source_provenance_hash,omitempty"`
	// Options for a verifiable build with details uploaded to the Analysis API.
	RequestedVerifyOption BuildOptions_VerifyOption `protobuf:"varint,2,opt,name=requested_verify_option,json=requestedVerifyOption,enum=google.devtools.cloudbuild.v1.BuildOptions_VerifyOption" json:"requested_verify_option,omitempty"`
}

func (m *BuildOptions) Reset()                    { *m = BuildOptions{} }
func (m *BuildOptions) String() string            { return proto.CompactTextString(m) }
func (*BuildOptions) ProtoMessage()               {}
func (*BuildOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func init() {
	proto.RegisterType((*StorageSource)(nil), "google.devtools.cloudbuild.v1.StorageSource")
	proto.RegisterType((*RepoSource)(nil), "google.devtools.cloudbuild.v1.RepoSource")
	proto.RegisterType((*Source)(nil), "google.devtools.cloudbuild.v1.Source")
	proto.RegisterType((*BuiltImage)(nil), "google.devtools.cloudbuild.v1.BuiltImage")
	proto.RegisterType((*BuildStep)(nil), "google.devtools.cloudbuild.v1.BuildStep")
	proto.RegisterType((*Results)(nil), "google.devtools.cloudbuild.v1.Results")
	proto.RegisterType((*Build)(nil), "google.devtools.cloudbuild.v1.Build")
	proto.RegisterType((*BuildOperationMetadata)(nil), "google.devtools.cloudbuild.v1.BuildOperationMetadata")
	proto.RegisterType((*SourceProvenance)(nil), "google.devtools.cloudbuild.v1.SourceProvenance")
	proto.RegisterType((*FileHashes)(nil), "google.devtools.cloudbuild.v1.FileHashes")
	proto.RegisterType((*Hash)(nil), "google.devtools.cloudbuild.v1.Hash")
	proto.RegisterType((*CreateBuildRequest)(nil), "google.devtools.cloudbuild.v1.CreateBuildRequest")
	proto.RegisterType((*GetBuildRequest)(nil), "google.devtools.cloudbuild.v1.GetBuildRequest")
	proto.RegisterType((*ListBuildsRequest)(nil), "google.devtools.cloudbuild.v1.ListBuildsRequest")
	proto.RegisterType((*ListBuildsResponse)(nil), "google.devtools.cloudbuild.v1.ListBuildsResponse")
	proto.RegisterType((*CancelBuildRequest)(nil), "google.devtools.cloudbuild.v1.CancelBuildRequest")
	proto.RegisterType((*BuildOptions)(nil), "google.devtools.cloudbuild.v1.BuildOptions")
	proto.RegisterEnum("google.devtools.cloudbuild.v1.Build_Status", Build_Status_name, Build_Status_value)
	proto.RegisterEnum("google.devtools.cloudbuild.v1.Hash_HashType", Hash_HashType_name, Hash_HashType_value)
	proto.RegisterEnum("google.devtools.cloudbuild.v1.BuildOptions_VerifyOption", BuildOptions_VerifyOption_name, BuildOptions_VerifyOption_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for CloudBuild service

type CloudBuildClient interface {
	// Starts a build with the specified configuration.
	//
	// The long-running Operation returned by this method will include the ID of
	// the build, which can be passed to GetBuild to determine its status (e.g.,
	// success or failure).
	CreateBuild(ctx context.Context, in *CreateBuildRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error)
	// Returns information about a previously requested build.
	//
	// The Build that is returned includes its status (e.g., success or failure,
	// or in-progress), and timing information.
	GetBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*Build, error)
	// Lists previously requested builds.
	//
	// Previously requested builds may still be in-progress, or may have finished
	// successfully or unsuccessfully.
	ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error)
	// Cancels a requested build in progress.
	CancelBuild(ctx context.Context, in *CancelBuildRequest, opts ...grpc.CallOption) (*Build, error)
}

type cloudBuildClient struct {
	cc *grpc.ClientConn
}

func NewCloudBuildClient(cc *grpc.ClientConn) CloudBuildClient {
	return &cloudBuildClient{cc}
}

func (c *cloudBuildClient) CreateBuild(ctx context.Context, in *CreateBuildRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error) {
	out := new(google_longrunning.Operation)
	err := grpc.Invoke(ctx, "/google.devtools.cloudbuild.v1.CloudBuild/CreateBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudBuildClient) GetBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := grpc.Invoke(ctx, "/google.devtools.cloudbuild.v1.CloudBuild/GetBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudBuildClient) ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error) {
	out := new(ListBuildsResponse)
	err := grpc.Invoke(ctx, "/google.devtools.cloudbuild.v1.CloudBuild/ListBuilds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudBuildClient) CancelBuild(ctx context.Context, in *CancelBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := grpc.Invoke(ctx, "/google.devtools.cloudbuild.v1.CloudBuild/CancelBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CloudBuild service

type CloudBuildServer interface {
	// Starts a build with the specified configuration.
	//
	// The long-running Operation returned by this method will include the ID of
	// the build, which can be passed to GetBuild to determine its status (e.g.,
	// success or failure).
	CreateBuild(context.Context, *CreateBuildRequest) (*google_longrunning.Operation, error)
	// Returns information about a previously requested build.
	//
	// The Build that is returned includes its status (e.g., success or failure,
	// or in-progress), and timing information.
	GetBuild(context.Context, *GetBuildRequest) (*Build, error)
	// Lists previously requested builds.
	//
	// Previously requested builds may still be in-progress, or may have finished
	// successfully or unsuccessfully.
	ListBuilds(context.Context, *ListBuildsRequest) (*ListBuildsResponse, error)
	// Cancels a requested build in progress.
	CancelBuild(context.Context, *CancelBuildRequest) (*Build, error)
}

func RegisterCloudBuildServer(s *grpc.Server, srv CloudBuildServer) {
	s.RegisterService(&_CloudBuild_serviceDesc, srv)
}

func _CloudBuild_CreateBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudBuildServer).CreateBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.cloudbuild.v1.CloudBuild/CreateBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudBuildServer).CreateBuild(ctx, req.(*CreateBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudBuild_GetBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudBuildServer).GetBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.cloudbuild.v1.CloudBuild/GetBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudBuildServer).GetBuild(ctx, req.(*GetBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudBuild_ListBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudBuildServer).ListBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.cloudbuild.v1.CloudBuild/ListBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudBuildServer).ListBuilds(ctx, req.(*ListBuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudBuild_CancelBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudBuildServer).CancelBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.cloudbuild.v1.CloudBuild/CancelBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudBuildServer).CancelBuild(ctx, req.(*CancelBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudBuild_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.devtools.cloudbuild.v1.CloudBuild",
	HandlerType: (*CloudBuildServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBuild",
			Handler:    _CloudBuild_CreateBuild_Handler,
		},
		{
			MethodName: "GetBuild",
			Handler:    _CloudBuild_GetBuild_Handler,
		},
		{
			MethodName: "ListBuilds",
			Handler:    _CloudBuild_ListBuilds_Handler,
		},
		{
			MethodName: "CancelBuild",
			Handler:    _CloudBuild_CancelBuild_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() {
	proto.RegisterFile("google.golang.org/genproto/googleapis/devtools/cloudbuild/v1/cloudbuild.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x57, 0xeb, 0x8e, 0xdb, 0x44,
	0x14, 0xae, 0x93, 0x6c, 0x2e, 0x27, 0x7b, 0x49, 0x87, 0x5e, 0xdc, 0xad, 0x4a, 0x8b, 0x4b, 0x4b,
	0x5b, 0x4a, 0xcc, 0x6e, 0x05, 0xb4, 0x5b, 0xa0, 0xdd, 0x4d, 0xb3, 0x6d, 0xd4, 0x6d, 0x52, 0x26,
	0x49, 0xfb, 0x03, 0x24, 0xe3, 0x24, 0xb3, 0x8e, 0xa9, 0x63, 0x07, 0x5f, 0x42, 0xb7, 0x15, 0x12,
	0xea, 0x6f, 0x24, 0x90, 0xe0, 0x1f, 0x3f, 0x10, 0xbc, 0x03, 0xe2, 0x39, 0x10, 0xaf, 0xc0, 0x0b,
	0xf0, 0x06, 0xcc, 0xcd, 0xb9, 0xec, 0x22, 0x9c, 0x88, 0x3f, 0xd6, 0xcc, 0x99, 0xf3, 0x9d, 0x73,
	0xe6, 0x5c, 0xc7, 0xf0, 0xc8, 0xf2, 0x3c, 0xcb, 0x21, 0x65, 0xcb, 0x73, 0x4c, 0xd7, 0x2a, 0x7b,
	0xbe, 0xa5, 0x5b, 0xc4, 0x1d, 0xfa, 0x5e, 0xe8, 0xe9, 0xe2, 0xc8, 0x1c, 0xda, 0x81, 0xde, 0x23,
	0xa3, 0xd0, 0xf3, 0x9c, 0x40, 0xef, 0x3a, 0x5e, 0xd4, 0xeb, 0x44, 0xb6, 0xd3, 0xd3, 0x47, 0x1b,
	0x53, 0xbb, 0x32, 0x87, 0xa0, 0x73, 0x52, 0x5c, 0xcc, 0x5f, 0x9e, 0xe2, 0x18, 0x6d, 0xac, 0xd7,
	0xe6, 0xd3, 0x46, 0x3f, 0x7a, 0x40, 0xfc, 0x91, 0xdd, 0x25, 0x5d, 0xcf, 0xdd, 0xb7, 0x2d, 0xdd,
	0x74, 0x5d, 0x2f, 0x34, 0x43, 0xdb, 0x73, 0x03, 0xa1, 0x69, 0x7d, 0x51, 0xc3, 0x03, 0x2f, 0xf2,
	0xbb, 0x84, 0x19, 0x2d, 0x56, 0x06, 0x95, 0x1c, 0x92, 0xe7, 0xa1, 0x14, 0xb7, 0x33, 0x9f, 0x38,
	0xc7, 0x73, 0x2d, 0x3f, 0x72, 0x5d, 0xdb, 0xb5, 0x74, 0x6f, 0x48, 0xfc, 0x19, 0x93, 0x6e, 0x59,
	0x76, 0xd8, 0x8f, 0x3a, 0xe5, 0xae, 0x37, 0xd0, 0x85, 0x1c, 0x9d, 0x1f, 0x74, 0xa2, 0x7d, 0x7d,
	0x18, 0x1e, 0x0c, 0x09, 0x35, 0x27, 0x12, 0x90, 0xf1, 0x42, 0x42, 0x6f, 0x24, 0x43, 0xc9, 0x80,
	0x2e, 0xc4, 0x57, 0x82, 0x6e, 0x27, 0x83, 0x42, 0x7b, 0x40, 0x82, 0xd0, 0x1c, 0x0c, 0x27, 0x2b,
	0x01, 0xd6, 0x0c, 0x58, 0x69, 0x86, 0x9e, 0x6f, 0x5a, 0xa4, 0xc9, 0xfd, 0x81, 0x4e, 0x41, 0xb6,
	0x13, 0x75, 0x9f, 0x91, 0x50, 0x55, 0x2e, 0x28, 0x57, 0x0a, 0x58, 0xee, 0x18, 0xdd, 0xeb, 0x7c,
	0x41, 0xba, 0xa1, 0x9a, 0x12, 0x74, 0xb1, 0x43, 0xaf, 0x03, 0x50, 0x0f, 0x49, 0x17, 0xa8, 0x69,
	0x7a, 0x96, 0xc6, 0x53, 0x14, 0xed, 0x37, 0x05, 0x00, 0x93, 0xa1, 0x27, 0xc5, 0x9f, 0x03, 0xa0,
	0x8a, 0x19, 0xd2, 0xb0, 0x7b, 0x52, 0x45, 0x41, 0x52, 0x6a, 0x3d, 0x74, 0x16, 0x0a, 0x3e, 0x65,
	0x36, 0x5c, 0x73, 0x40, 0xa4, 0xa2, 0x3c, 0x23, 0xd4, 0xe9, 0x1e, 0xbd, 0x01, 0xc5, 0x8e, 0x6f,
	0xba, 0xdd, 0xbe, 0x38, 0x66, 0xba, 0x0a, 0x0f, 0x8e, 0x61, 0x10, 0x44, 0xce, 0x72, 0x16, 0xf2,
	0xa1, 0x69, 0x89, 0xf3, 0x8c, 0x3c, 0xcf, 0x51, 0x0a, 0x3f, 0x3c, 0x0f, 0x40, 0x7d, 0x34, 0xb0,
	0x43, 0x23, 0xe8, 0x9b, 0xea, 0x92, 0x3c, 0x2e, 0x08, 0x5a, 0xb3, 0x6f, 0xee, 0x00, 0x50, 0x65,
	0x23, 0x3b, 0x60, 0x76, 0xff, 0xae, 0x40, 0x56, 0xda, 0xdc, 0x86, 0xd5, 0x40, 0xf8, 0xc8, 0x10,
	0x49, 0xc3, 0x2d, 0x2b, 0x6e, 0x5e, 0x2f, 0xff, 0x67, 0x9a, 0x97, 0x67, 0x1c, 0x4b, 0x35, 0xad,
	0x04, 0x33, 0x9e, 0xde, 0x83, 0x22, 0xbf, 0xab, 0x94, 0x99, 0xe6, 0x32, 0xaf, 0x26, 0xc8, 0x9c,
	0xb8, 0x92, 0xdd, 0xdc, 0x1f, 0xef, 0x76, 0xf2, 0x90, 0x15, 0x82, 0xb4, 0x9b, 0x00, 0x3b, 0x94,
	0x3d, 0xac, 0x0d, 0xa8, 0x2e, 0x84, 0x20, 0xc3, 0xbd, 0x21, 0x5c, 0xcd, 0xd7, 0x2c, 0x96, 0x3d,
	0xdb, 0xa2, 0x79, 0x20, 0x7c, 0x88, 0xe5, 0x4e, 0x7b, 0xa5, 0x40, 0x81, 0x41, 0x7b, 0xcd, 0x90,
	0x0c, 0xff, 0x15, 0x59, 0x82, 0x34, 0x71, 0x47, 0xf4, 0xfe, 0x69, 0x4a, 0x62, 0x4b, 0xc6, 0x65,
	0xfa, 0x56, 0x40, 0x25, 0x31, 0x12, 0x5f, 0x33, 0xae, 0x9e, 0xed, 0x8b, 0x00, 0x60, 0xb6, 0x44,
	0xab, 0x90, 0xa2, 0xe1, 0xe6, 0x2e, 0xc7, 0x74, 0x85, 0xce, 0x40, 0xfe, 0x2b, 0x93, 0x06, 0x62,
	0xdf, 0xf3, 0xd5, 0x2c, 0x47, 0xe6, 0xd8, 0x7e, 0xd7, 0xf3, 0xb5, 0xe7, 0x90, 0xc3, 0x24, 0x88,
	0x9c, 0x30, 0x40, 0xdb, 0x90, 0xb5, 0xd9, 0x25, 0x02, 0xae, 0x30, 0xd9, 0x39, 0x93, 0x6b, 0x63,
	0x09, 0x44, 0xd7, 0xe0, 0x38, 0x3f, 0x36, 0x02, 0x7a, 0x25, 0x43, 0x4a, 0x13, 0xb6, 0xae, 0x75,
	0xe2, 0xab, 0x72, 0x48, 0xa0, 0xfd, 0x91, 0x83, 0x25, 0x7e, 0x7d, 0x69, 0xae, 0x32, 0x36, 0x77,
	0x36, 0x6b, 0x4b, 0x87, 0xb3, 0xb6, 0x42, 0x7d, 0x4f, 0xdb, 0x52, 0x14, 0xf0, 0xc4, 0x58, 0xdd,
	0x7c, 0x7b, 0x0e, 0x3b, 0x7b, 0x34, 0x3d, 0x18, 0x04, 0x4b, 0x28, 0xba, 0x08, 0x2b, 0x62, 0x65,
	0xf4, 0x48, 0x68, 0xda, 0x8e, 0xaa, 0x72, 0x35, 0xcb, 0x82, 0x78, 0x8f, 0xd3, 0xd0, 0x47, 0x71,
	0x94, 0x65, 0xba, 0x5c, 0x4a, 0x4a, 0x41, 0xce, 0x8c, 0x25, 0x08, 0x7d, 0x0c, 0x4b, 0xcc, 0x0f,
	0x81, 0x5a, 0xe4, 0xfe, 0xbc, 0x32, 0x8f, 0x9d, 0xcc, 0x41, 0x58, 0xc0, 0xd0, 0x5d, 0xc8, 0xf9,
	0x22, 0x36, 0x2a, 0x70, 0xfd, 0x97, 0x13, 0xd3, 0x95, 0x73, 0xe3, 0x18, 0x86, 0x6e, 0x43, 0xb1,
	0xeb, 0x13, 0x33, 0x24, 0x06, 0xeb, 0x44, 0x34, 0xf6, 0x4c, 0xca, 0x7a, 0x2c, 0x25, 0xee, 0x5b,
	0xe5, 0x56, 0xdc, 0xa6, 0x30, 0x08, 0x76, 0x46, 0x40, 0xb7, 0x00, 0x28, 0xd1, 0x0f, 0x05, 0x36,
	0x97, 0x88, 0x2d, 0x70, 0x6e, 0x0e, 0xa5, 0x7a, 0xf7, 0x6d, 0xd7, 0x0e, 0xfa, 0x02, 0x9b, 0x4f,
	0xd6, 0x2b, 0xd8, 0x39, 0xf8, 0x06, 0xe4, 0x18, 0xca, 0x8b, 0x42, 0x75, 0x99, 0x03, 0xcf, 0x1c,
	0x01, 0xde, 0x93, 0x8d, 0x1c, 0xc7, 0x9c, 0xac, 0xc8, 0x64, 0xba, 0xad, 0xf0, 0x74, 0x8b, 0x33,
	0xf2, 0x3c, 0x14, 0x1d, 0xcf, 0x0a, 0x0c, 0xd9, 0x65, 0x5f, 0xe3, 0x51, 0x06, 0x46, 0xda, 0x11,
	0x9d, 0xf6, 0x33, 0x38, 0x2e, 0x67, 0x13, 0x95, 0x3e, 0x22, 0x2e, 0x6d, 0x6e, 0x44, 0x3d, 0xc9,
	0xf5, 0xea, 0x73, 0x85, 0xfb, 0xf1, 0x18, 0x86, 0x4b, 0xc1, 0x21, 0x0a, 0xaa, 0x42, 0xce, 0x1b,
	0xf2, 0x71, 0xa5, 0x9e, 0xe6, 0x32, 0xe7, 0x4a, 0xd6, 0x86, 0x80, 0xe0, 0x18, 0x8b, 0x4e, 0x43,
	0x8e, 0x9a, 0x6c, 0x44, 0xbe, 0xa3, 0x9e, 0x11, 0x3d, 0x84, 0x6e, 0xdb, 0xbe, 0xa3, 0x7d, 0xcb,
	0xfa, 0xa6, 0xc8, 0x68, 0x04, 0xab, 0xcd, 0xd6, 0x76, 0xab, 0xdd, 0x34, 0xda, 0xf5, 0x87, 0xf5,
	0xc6, 0xd3, 0x7a, 0xe9, 0x18, 0x2a, 0x42, 0xee, 0x93, 0x76, 0xb5, 0x5d, 0xab, 0xdf, 0x2f, 0xe5,
	0x11, 0x40, 0x96, 0x6d, 0xaa, 0xf7, 0x4a, 0x0a, 0x3b, 0x78, 0xda, 0xc0, 0x0f, 0xd9, 0x41, 0x8a,
	0x6d, 0x9a, 0xed, 0x4a, 0xa5, 0xda, 0x6c, 0x96, 0xd2, 0x6c, 0xb3, 0xbb, 0x5d, 0xdb, 0x6b, 0xe3,
	0x6a, 0x29, 0xc3, 0x64, 0xd6, 0xea, 0xad, 0x2a, 0xae, 0x6f, 0xef, 0x19, 0x55, 0x8c, 0x1b, 0xb8,
	0xb4, 0xc4, 0x18, 0x5a, 0xb5, 0x47, 0xd5, 0x46, 0xbb, 0x55, 0xca, 0xa2, 0x15, 0x28, 0x54, 0xb6,
	0xeb, 0x95, 0xea, 0xde, 0x1e, 0x15, 0x9b, 0xd3, 0x5a, 0x70, 0x4a, 0x5e, 0x40, 0x0e, 0xa4, 0x47,
	0xb4, 0x90, 0x7a, 0x66, 0x68, 0xa2, 0x2d, 0x58, 0xe2, 0x77, 0xe4, 0x65, 0x5e, 0xdc, 0x7c, 0x73,
	0x1e, 0x37, 0x60, 0x01, 0xd1, 0x7e, 0x49, 0x43, 0xe9, 0xb0, 0xaf, 0x51, 0x0f, 0x4e, 0xd3, 0x2c,
	0xf7, 0x9c, 0x11, 0x61, 0xdd, 0x66, 0x66, 0x5e, 0xa4, 0x17, 0x9f, 0x17, 0xf8, 0x64, 0x2c, 0x6c,
	0x76, 0x3e, 0x7f, 0x0a, 0x27, 0xc6, 0x5a, 0xa6, 0xc7, 0x47, 0x76, 0xc1, 0xf1, 0x81, 0x51, 0x2c,
	0x66, 0x6a, 0x3a, 0x7f, 0xce, 0xaa, 0xc4, 0x21, 0x46, 0xdf, 0x0c, 0xfa, 0x34, 0x71, 0x33, 0xbc,
	0x4b, 0xdc, 0x59, 0x30, 0xe9, 0xca, 0xbb, 0x54, 0xc4, 0x03, 0x2e, 0xa1, 0xea, 0x86, 0xfe, 0x01,
	0x2b, 0xa5, 0x98, 0xb0, 0xde, 0x87, 0xb5, 0x43, 0xc7, 0x6c, 0x5a, 0x3c, 0x23, 0x07, 0xb2, 0xdb,
	0xb2, 0x25, 0xba, 0x03, 0x4b, 0x23, 0xd3, 0x89, 0xe2, 0x39, 0x9b, 0x74, 0xa9, 0x89, 0x40, 0x2c,
	0x70, 0x5b, 0xa9, 0x9b, 0x8a, 0x56, 0x07, 0x98, 0x1c, 0xd0, 0xce, 0x55, 0x18, 0xdf, 0x8c, 0xaa,
	0x62, 0xf7, 0xba, 0x98, 0x20, 0x96, 0x21, 0x71, 0x3e, 0xb6, 0x5d, 0xfb, 0x46, 0x81, 0x0c, 0x5b,
	0x50, 0x51, 0x19, 0xf6, 0xaa, 0xe2, 0x06, 0xaf, 0x26, 0x06, 0x95, 0x41, 0xf8, 0xa7, 0x45, 0x31,
	0x98, 0x23, 0xd1, 0x89, 0xe9, 0xfb, 0x2d, 0x4b, 0xa3, 0xb5, 0x0b, 0x90, 0x8f, 0xf9, 0x50, 0x1e,
	0x32, 0xf5, 0x46, 0xbd, 0x4a, 0x0b, 0x86, 0xd6, 0x48, 0xf3, 0xc1, 0xf6, 0xe6, 0x7b, 0xef, 0x97,
	0x14, 0xcd, 0x03, 0x54, 0xe1, 0xdd, 0x50, 0x24, 0x23, 0xf9, 0x32, 0xa2, 0xcd, 0x2a, 0xe9, 0x49,
	0x35, 0xce, 0xf3, 0xd4, 0xe2, 0x79, 0x7e, 0x17, 0xd6, 0xee, 0x93, 0x70, 0x11, 0x6d, 0x62, 0x72,
	0xa6, 0xe2, 0xc9, 0xa9, 0xb9, 0x70, 0x7c, 0xcf, 0x0e, 0x84, 0x88, 0x60, 0x4e, 0x19, 0xf4, 0x11,
	0x38, 0xe4, 0xc5, 0x63, 0xbf, 0x10, 0x2e, 0x5a, 0xc2, 0x79, 0x46, 0x68, 0xd2, 0x3d, 0xc7, 0xb2,
	0xc3, 0xd0, 0x7b, 0x46, 0x5c, 0xf9, 0x7e, 0xe1, 0xec, 0x2d, 0x46, 0xd0, 0x5e, 0x00, 0x9a, 0xd6,
	0x17, 0x0c, 0x69, 0xb3, 0x22, 0xe8, 0x43, 0xf6, 0xa8, 0x65, 0x14, 0x19, 0xfa, 0xf9, 0x9c, 0x20,
	0x31, 0xe8, 0x32, 0xac, 0xb9, 0xf4, 0x17, 0xc1, 0x98, 0xd2, 0x2b, 0x2e, 0xb8, 0xc2, 0xc8, 0x8f,
	0xc7, 0xba, 0x2b, 0x34, 0x3c, 0xac, 0x00, 0x9c, 0xff, 0xe3, 0xb0, 0x1f, 0x53, 0xb0, 0x3c, 0xdd,
	0x72, 0x51, 0x07, 0x4e, 0x1d, 0x19, 0x07, 0x93, 0x34, 0x5e, 0x34, 0x01, 0x4f, 0x1c, 0x1e, 0x08,
	0x3c, 0xa5, 0x87, 0xac, 0x75, 0x71, 0x73, 0x69, 0x57, 0x19, 0x11, 0xdf, 0xde, 0x3f, 0x30, 0x44,
	0xa7, 0x97, 0x2f, 0x9a, 0x9b, 0x0b, 0x0c, 0x89, 0xf2, 0x13, 0x2e, 0x40, 0xec, 0x58, 0x1b, 0x93,
	0x82, 0xa7, 0xc9, 0x5a, 0x19, 0x96, 0xa7, 0xf7, 0xb4, 0x09, 0x2c, 0xd7, 0x1b, 0x2d, 0xe3, 0x49,
	0x15, 0xd7, 0x76, 0x6b, 0xb4, 0x73, 0x1f, 0x43, 0xcb, 0x90, 0x1f, 0xef, 0x94, 0xcd, 0xbf, 0x33,
	0x00, 0x15, 0xa6, 0x52, 0x3c, 0xd0, 0xbe, 0x57, 0xa0, 0x38, 0x55, 0x0a, 0x68, 0x23, 0xc1, 0xbe,
	0xa3, 0x65, 0xb3, 0x7e, 0x2e, 0x86, 0x4c, 0xfd, 0xcc, 0x95, 0xc7, 0x63, 0x42, 0xd3, 0x5f, 0xfd,
	0xf9, 0xd7, 0x0f, 0xa9, 0xab, 0xda, 0x05, 0xf6, 0xaf, 0x28, 0xc3, 0x15, 0xe8, 0x2f, 0x27, 0xa1,
	0xfc, 0x5a, 0x17, 0xe9, 0xb1, 0x25, 0x6a, 0x05, 0x7d, 0xa7, 0x40, 0x3e, 0x2e, 0x16, 0x54, 0x4e,
	0xb0, 0xe7, 0x50, 0x55, 0xad, 0xcf, 0x95, 0x90, 0xda, 0x3b, 0xdc, 0xa6, 0xb7, 0xd0, 0xa5, 0x24,
	0x9b, 0xf4, 0x97, 0x74, 0x8d, 0x7e, 0xa2, 0xbf, 0x5e, 0x93, 0x62, 0x40, 0xef, 0x26, 0xe8, 0x38,
	0x52, 0xa7, 0xeb, 0x1b, 0x0b, 0x20, 0x44, 0xa5, 0x69, 0x57, 0xb8, 0x89, 0x1a, 0x4a, 0x74, 0x1b,
	0xfa, 0x99, 0x85, 0x70, 0x52, 0x2e, 0xc9, 0x21, 0x3c, 0x52, 0x5a, 0x73, 0x7a, 0xed, 0x03, 0x6e,
	0xd2, 0x86, 0x76, 0x7d, 0x2e, 0xaf, 0x6d, 0x75, 0xb9, 0x9e, 0x2d, 0xe5, 0xda, 0x8e, 0x06, 0x2a,
	0xfd, 0x37, 0x8c, 0x75, 0xcc, 0x88, 0x7e, 0xac, 0xfc, 0x9a, 0x4a, 0xdf, 0xaf, 0xec, 0x74, 0xb2,
	0xfc, 0x05, 0x78, 0xe3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x56, 0xff, 0xb1, 0x41, 0x11,
	0x00, 0x00,
}
