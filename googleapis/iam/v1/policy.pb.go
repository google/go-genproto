// Code generated by protoc-gen-go.
// source: google.golang.org/genproto/googleapis/iam/v1/policy.proto
// DO NOT EDIT!

package google_iam_v1 // import "google.golang.org/genproto/googleapis/iam/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// # Overview
//
// The `Policy` defines an access control policy language. It is used to
// define policies that are attached to resources like files, folders, VMs,
// etc.
//
//
// # Policy structure
//
// A `Policy` consists of a list of bindings. A `Binding` binds a set of members
// to a role, where the members include user accounts, user groups, user
// domains, and service accounts. A 'role' is a named set of permissions,
// defined by IAM. The definition of a role is outside the policy.
//
// A permission check first determines the roles that include the specified
// permission, and then determines if the principal specified is a
// member of a binding to at least one of these roles. The membership check is
// recursive when a group is bound to a role.
//
// Policy examples:
//
// ```
// {
//   "bindings": [
//     {
//       "role": "roles/owner",
//       "members": [
//         "user:mike@example.com",
//         "group:admins@example.com",
//         "domain:google.com",
//         "serviceAccount:frontend@example.iam.gserviceaccounts.com"]
//     },
//     {
//       "role": "roles/viewer",
//       "members": ["user:sean@example.com"]
//     }
//   ]
// }
// ```
type Policy struct {
	// The policy language version. The version of the policy is
	// represented by the etag. The default version is 0.
	Version int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// It is an error to specify multiple bindings for the same role.
	// It is an error to specify a binding with no members.
	Bindings []*Binding `protobuf:"bytes,4,rep,name=bindings" json:"bindings,omitempty"`
	// Can be used to perform a read-modify-write.
	Etag []byte `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
}

func (m *Policy) Reset()                    { *m = Policy{} }
func (m *Policy) String() string            { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()               {}
func (*Policy) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Policy) GetBindings() []*Binding {
	if m != nil {
		return m.Bindings
	}
	return nil
}

// Associates members with roles. See below for allowed
// formats of members.
type Binding struct {
	// The name of the role to which the members should be bound.
	// Examples: "roles/viewer", "roles/editor", "roles/owner".
	// Required
	Role string `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	// Format of member entries:
	// 1. allUsers
	//    Matches any requesting principal (users, service accounts or anonymous).
	//
	// 2. allAuthenticatedUsers
	//    Matches any requesting authenticated principal (users or service
	//    accounts).
	//
	// 3. user:{emailid}
	//    A google user account using an email address.
	//    For example alice@gmail.com, joe@example.com
	//
	// 4. serviceAccount:{emailid}
	//    An service account email.
	//
	// 5. group:{emailid}
	//    A google group with an email address. For example
	//    auth-ti-cloud@google.com
	//
	// 6. domain:{domain}
	//    A Google Apps domain name.
	//    For example google.com, example.com
	Members []string `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
}

func (m *Binding) Reset()                    { *m = Binding{} }
func (m *Binding) String() string            { return proto.CompactTextString(m) }
func (*Binding) ProtoMessage()               {}
func (*Binding) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*Policy)(nil), "google.iam.v1.Policy")
	proto.RegisterType((*Binding)(nil), "google.iam.v1.Binding")
}

func init() {
	proto.RegisterFile("google.golang.org/genproto/googleapis/iam/v1/policy.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x8f, 0xb1, 0x6e, 0xc3, 0x20,
	0x18, 0x84, 0x45, 0x9d, 0x26, 0x0d, 0x69, 0x87, 0x32, 0x54, 0x8c, 0xc8, 0x13, 0x13, 0x28, 0xe9,
	0x50, 0x75, 0xf5, 0x13, 0x58, 0xbc, 0x01, 0x4e, 0xd1, 0x2f, 0x2a, 0xe0, 0xb7, 0x20, 0xb2, 0xd4,
	0xb7, 0xaf, 0x8c, 0xe3, 0x48, 0xde, 0xfe, 0xd3, 0x77, 0x70, 0x77, 0xf4, 0x1b, 0x10, 0x21, 0x38,
	0x05, 0x18, 0x6c, 0x02, 0x85, 0x19, 0x34, 0xb8, 0x34, 0x66, 0xbc, 0xa1, 0x5e, 0x90, 0x1d, 0x7d,
	0xd1, 0xde, 0x46, 0x3d, 0x9d, 0xf5, 0x88, 0xc1, 0x5f, 0xff, 0x54, 0xc5, 0xec, 0xed, 0xfe, 0xd4,
	0xdb, 0xa8, 0xa6, 0x73, 0xfb, 0x4b, 0xf7, 0x7d, 0xc5, 0x8c, 0xd3, 0xc3, 0xe4, 0x72, 0xf1, 0x98,
	0x38, 0x11, 0x44, 0x3e, 0x9b, 0x55, 0xb2, 0x0b, 0x7d, 0x19, 0x7c, 0xfa, 0xf1, 0x09, 0x0a, 0xdf,
	0x89, 0x46, 0x9e, 0x2e, 0x1f, 0x6a, 0xf3, 0x8b, 0xea, 0x16, 0x6c, 0x1e, 0x3e, 0xc6, 0xe8, 0xce,
	0xdd, 0x2c, 0xf0, 0x46, 0x10, 0xf9, 0x6a, 0xea, 0xdd, 0x7e, 0xd1, 0xc3, 0xdd, 0x38, 0xe3, 0x8c,
	0xc1, 0xd5, 0xa4, 0xa3, 0xa9, 0xf7, 0x5c, 0x20, 0xba, 0x38, 0xb8, 0x5c, 0xf8, 0x93, 0x68, 0xe4,
	0xd1, 0xac, 0xb2, 0x6b, 0xe9, 0xfb, 0x15, 0xe3, 0x36, 0xb3, 0x3b, 0x2d, 0xbd, 0xfb, 0x79, 0x55,
	0x4f, 0x86, 0x7d, 0x9d, 0xf7, 0xf9, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x17, 0x1d, 0x81, 0xd6, 0x1b,
	0x01, 0x00, 0x00,
}
