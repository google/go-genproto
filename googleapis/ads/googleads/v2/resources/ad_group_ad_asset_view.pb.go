// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/ads/googleads/v2/resources/ad_group_ad_asset_view.proto

package resources

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	common "google.golang.org/genproto/googleapis/ads/googleads/v2/common"
	enums "google.golang.org/genproto/googleapis/ads/googleads/v2/enums"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A link between an AdGroupAd and an Asset.
type AdGroupAdAssetView struct {
	// Immutable. The resource name of the ad group ad asset view.
	// Ad group ad asset view resource names have the form:
	//
	// `customers/{customer_id}/adGroupAdAssets/{AdGroupAdAsset.ad_group_id}~{AdGroupAdAsset.ad.ad_id}~{AdGroupAdAsset.asset_id}~{AdGroupAdAsset.asset_field_type}`
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// Output only. The ad group ad to which the asset is linked.
	AdGroupAd *wrappers.StringValue `protobuf:"bytes,5,opt,name=ad_group_ad,json=adGroupAd,proto3" json:"ad_group_ad,omitempty"`
	// Output only. The asset which is linked to the ad group ad.
	Asset *wrappers.StringValue `protobuf:"bytes,6,opt,name=asset,proto3" json:"asset,omitempty"`
	// Output only. Role that the asset takes in the ad.
	FieldType enums.AssetFieldTypeEnum_AssetFieldType `protobuf:"varint,2,opt,name=field_type,json=fieldType,proto3,enum=google.ads.googleads.v2.enums.AssetFieldTypeEnum_AssetFieldType" json:"field_type,omitempty"`
	// Output only. Policy information for the ad group ad asset.
	PolicySummary *AdGroupAdAssetPolicySummary `protobuf:"bytes,3,opt,name=policy_summary,json=policySummary,proto3" json:"policy_summary,omitempty"`
	// Output only. Performance of an asset linkage.
	PerformanceLabel     enums.AssetPerformanceLabelEnum_AssetPerformanceLabel `protobuf:"varint,4,opt,name=performance_label,json=performanceLabel,proto3,enum=google.ads.googleads.v2.enums.AssetPerformanceLabelEnum_AssetPerformanceLabel" json:"performance_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *AdGroupAdAssetView) Reset()         { *m = AdGroupAdAssetView{} }
func (m *AdGroupAdAssetView) String() string { return proto.CompactTextString(m) }
func (*AdGroupAdAssetView) ProtoMessage()    {}
func (*AdGroupAdAssetView) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8c6610099f54310, []int{0}
}

func (m *AdGroupAdAssetView) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdGroupAdAssetView.Unmarshal(m, b)
}
func (m *AdGroupAdAssetView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdGroupAdAssetView.Marshal(b, m, deterministic)
}
func (m *AdGroupAdAssetView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdGroupAdAssetView.Merge(m, src)
}
func (m *AdGroupAdAssetView) XXX_Size() int {
	return xxx_messageInfo_AdGroupAdAssetView.Size(m)
}
func (m *AdGroupAdAssetView) XXX_DiscardUnknown() {
	xxx_messageInfo_AdGroupAdAssetView.DiscardUnknown(m)
}

var xxx_messageInfo_AdGroupAdAssetView proto.InternalMessageInfo

func (m *AdGroupAdAssetView) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *AdGroupAdAssetView) GetAdGroupAd() *wrappers.StringValue {
	if m != nil {
		return m.AdGroupAd
	}
	return nil
}

func (m *AdGroupAdAssetView) GetAsset() *wrappers.StringValue {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (m *AdGroupAdAssetView) GetFieldType() enums.AssetFieldTypeEnum_AssetFieldType {
	if m != nil {
		return m.FieldType
	}
	return enums.AssetFieldTypeEnum_UNSPECIFIED
}

func (m *AdGroupAdAssetView) GetPolicySummary() *AdGroupAdAssetPolicySummary {
	if m != nil {
		return m.PolicySummary
	}
	return nil
}

func (m *AdGroupAdAssetView) GetPerformanceLabel() enums.AssetPerformanceLabelEnum_AssetPerformanceLabel {
	if m != nil {
		return m.PerformanceLabel
	}
	return enums.AssetPerformanceLabelEnum_UNSPECIFIED
}

// Contains policy information for an ad group ad asset.
type AdGroupAdAssetPolicySummary struct {
	// Output only. The list of policy findings for the ad group ad asset.
	PolicyTopicEntries []*common.PolicyTopicEntry `protobuf:"bytes,1,rep,name=policy_topic_entries,json=policyTopicEntries,proto3" json:"policy_topic_entries,omitempty"`
	// Output only. Where in the review process this ad group ad asset is.
	ReviewStatus enums.PolicyReviewStatusEnum_PolicyReviewStatus `protobuf:"varint,2,opt,name=review_status,json=reviewStatus,proto3,enum=google.ads.googleads.v2.enums.PolicyReviewStatusEnum_PolicyReviewStatus" json:"review_status,omitempty"`
	// Output only. The overall approval status of this ad group ad asset, calculated based on
	// the status of its individual policy topic entries.
	ApprovalStatus       enums.PolicyApprovalStatusEnum_PolicyApprovalStatus `protobuf:"varint,3,opt,name=approval_status,json=approvalStatus,proto3,enum=google.ads.googleads.v2.enums.PolicyApprovalStatusEnum_PolicyApprovalStatus" json:"approval_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
	XXX_unrecognized     []byte                                              `json:"-"`
	XXX_sizecache        int32                                               `json:"-"`
}

func (m *AdGroupAdAssetPolicySummary) Reset()         { *m = AdGroupAdAssetPolicySummary{} }
func (m *AdGroupAdAssetPolicySummary) String() string { return proto.CompactTextString(m) }
func (*AdGroupAdAssetPolicySummary) ProtoMessage()    {}
func (*AdGroupAdAssetPolicySummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8c6610099f54310, []int{1}
}

func (m *AdGroupAdAssetPolicySummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdGroupAdAssetPolicySummary.Unmarshal(m, b)
}
func (m *AdGroupAdAssetPolicySummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdGroupAdAssetPolicySummary.Marshal(b, m, deterministic)
}
func (m *AdGroupAdAssetPolicySummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdGroupAdAssetPolicySummary.Merge(m, src)
}
func (m *AdGroupAdAssetPolicySummary) XXX_Size() int {
	return xxx_messageInfo_AdGroupAdAssetPolicySummary.Size(m)
}
func (m *AdGroupAdAssetPolicySummary) XXX_DiscardUnknown() {
	xxx_messageInfo_AdGroupAdAssetPolicySummary.DiscardUnknown(m)
}

var xxx_messageInfo_AdGroupAdAssetPolicySummary proto.InternalMessageInfo

func (m *AdGroupAdAssetPolicySummary) GetPolicyTopicEntries() []*common.PolicyTopicEntry {
	if m != nil {
		return m.PolicyTopicEntries
	}
	return nil
}

func (m *AdGroupAdAssetPolicySummary) GetReviewStatus() enums.PolicyReviewStatusEnum_PolicyReviewStatus {
	if m != nil {
		return m.ReviewStatus
	}
	return enums.PolicyReviewStatusEnum_UNSPECIFIED
}

func (m *AdGroupAdAssetPolicySummary) GetApprovalStatus() enums.PolicyApprovalStatusEnum_PolicyApprovalStatus {
	if m != nil {
		return m.ApprovalStatus
	}
	return enums.PolicyApprovalStatusEnum_UNSPECIFIED
}

func init() {
	proto.RegisterType((*AdGroupAdAssetView)(nil), "google.ads.googleads.v2.resources.AdGroupAdAssetView")
	proto.RegisterType((*AdGroupAdAssetPolicySummary)(nil), "google.ads.googleads.v2.resources.AdGroupAdAssetPolicySummary")
}

func init() {
	proto.RegisterFile("google/ads/googleads/v2/resources/ad_group_ad_asset_view.proto", fileDescriptor_b8c6610099f54310)
}

var fileDescriptor_b8c6610099f54310 = []byte{
	// 731 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x6a, 0xdb, 0x4c,
	0x14, 0xc5, 0xf6, 0xe7, 0x40, 0x26, 0x89, 0xbf, 0x56, 0x14, 0xea, 0xa6, 0x21, 0x75, 0x42, 0x53,
	0x4c, 0x43, 0x47, 0x45, 0xe9, 0xa2, 0x28, 0x34, 0x74, 0x0c, 0x69, 0x4a, 0x09, 0xc1, 0x38, 0xc1,
	0x94, 0x60, 0x10, 0x63, 0x69, 0xac, 0xa8, 0x48, 0x9a, 0x61, 0x46, 0x72, 0x70, 0x43, 0xa0, 0x8b,
	0x3e, 0x49, 0x97, 0x7d, 0x94, 0x3e, 0x45, 0xd6, 0x79, 0x80, 0x2e, 0xb2, 0x2a, 0xd2, 0x8c, 0xe4,
	0xbf, 0x3a, 0x76, 0x77, 0xd7, 0xf7, 0xde, 0x73, 0x8e, 0xee, 0xdf, 0x18, 0x1c, 0xb8, 0x94, 0xba,
	0x3e, 0xd1, 0xb1, 0x23, 0x74, 0x69, 0x26, 0x56, 0xdf, 0xd0, 0x39, 0x11, 0x34, 0xe6, 0x36, 0x11,
	0x3a, 0x76, 0x2c, 0x97, 0xd3, 0x98, 0x59, 0xd8, 0xb1, 0xb0, 0x10, 0x24, 0xb2, 0xfa, 0x1e, 0xb9,
	0x84, 0x8c, 0xd3, 0x88, 0x6a, 0x5b, 0x12, 0x04, 0xb1, 0x23, 0x60, 0x8e, 0x87, 0x7d, 0x03, 0xe6,
	0xf8, 0xf5, 0xdd, 0x59, 0x12, 0x36, 0x0d, 0x02, 0x1a, 0xea, 0x8c, 0xfa, 0x9e, 0x3d, 0x90, 0x7c,
	0xeb, 0x6f, 0x66, 0x25, 0x93, 0x30, 0x0e, 0x84, 0x2e, 0xf5, 0x7b, 0x1e, 0xf1, 0x1d, 0x2b, 0x1a,
	0x30, 0xa2, 0x50, 0xfb, 0x8b, 0xa0, 0x18, 0xe1, 0x3d, 0xca, 0x03, 0x1c, 0xda, 0xc4, 0xf2, 0x71,
	0x97, 0xf8, 0x0a, 0x6c, 0xde, 0x0f, 0x96, 0x9f, 0x67, 0x61, 0xc6, 0x38, 0xed, 0x63, 0xdf, 0x12,
	0x11, 0x8e, 0x62, 0xa1, 0xb0, 0x6f, 0x17, 0xc2, 0x72, 0x92, 0x74, 0x6c, 0x1c, 0xf9, 0x2c, 0x43,
	0x32, 0x4f, 0x97, 0xf5, 0x74, 0xc9, 0x05, 0xee, 0x7b, 0x94, 0xab, 0x84, 0x27, 0x23, 0x09, 0x59,
	0x33, 0x55, 0x68, 0x53, 0x85, 0xd2, 0x5f, 0xdd, 0xb8, 0xa7, 0x5f, 0x72, 0xcc, 0x18, 0xe1, 0x19,
	0xf7, 0xc6, 0x08, 0x14, 0x87, 0x21, 0x8d, 0x70, 0xe4, 0xd1, 0x50, 0x45, 0xb7, 0xef, 0xca, 0x40,
	0x43, 0xce, 0x51, 0x32, 0x52, 0xe4, 0xa0, 0xa4, 0x35, 0x6d, 0x8f, 0x5c, 0x6a, 0x9f, 0xc1, 0x5a,
	0x26, 0x63, 0x85, 0x38, 0x20, 0xd5, 0x42, 0xad, 0x50, 0x5f, 0x6e, 0xec, 0xdd, 0xa0, 0xf2, 0x1d,
	0x7a, 0x05, 0x76, 0x87, 0xd3, 0x55, 0x16, 0xf3, 0x04, 0xb4, 0x69, 0xa0, 0x4f, 0x73, 0xb5, 0x56,
	0x33, 0xa6, 0x13, 0x1c, 0x10, 0xed, 0x02, 0xac, 0x8c, 0xec, 0x50, 0xb5, 0x5c, 0x2b, 0xd4, 0x57,
	0x8c, 0x0d, 0x45, 0x03, 0xb3, 0x22, 0xe0, 0x69, 0xc4, 0xbd, 0xd0, 0x6d, 0x63, 0x3f, 0x26, 0x8d,
	0x97, 0x37, 0xa8, 0x74, 0x87, 0x9e, 0x83, 0xed, 0xf9, 0xaa, 0xad, 0x65, 0x9c, 0x99, 0xda, 0x39,
	0x28, 0xa7, 0xb3, 0xae, 0x2e, 0x2d, 0xa0, 0xf1, 0x22, 0xd5, 0xa8, 0x81, 0xcd, 0xd9, 0x1a, 0x09,
	0x57, 0x4b, 0x52, 0x6a, 0x0e, 0x00, 0xc3, 0xbd, 0xab, 0x16, 0x6b, 0x85, 0x7a, 0xc5, 0x78, 0x0f,
	0x67, 0xad, 0x7f, 0x3a, 0x7f, 0x98, 0x12, 0x7c, 0x48, 0x50, 0x67, 0x03, 0x46, 0x0e, 0xc3, 0x38,
	0x98, 0x70, 0x35, 0x4a, 0x37, 0xa8, 0xd4, 0x5a, 0xee, 0x65, 0xbf, 0xb5, 0x2f, 0xa0, 0xa2, 0x96,
	0x46, 0xc4, 0x41, 0x80, 0xf9, 0xa0, 0x5a, 0x4a, 0x4b, 0x39, 0x80, 0x73, 0x0f, 0x0d, 0x8e, 0x0f,
	0xa2, 0x99, 0xd2, 0x9c, 0x4a, 0x16, 0xa9, 0xb3, 0xc6, 0x46, 0x7d, 0xda, 0xb7, 0x02, 0x78, 0x38,
	0x75, 0x14, 0xd5, 0xff, 0xd2, 0xca, 0x4e, 0x16, 0xa9, 0xac, 0x39, 0x04, 0x1f, 0x27, 0xd8, 0x61,
	0x81, 0x93, 0x11, 0xa9, 0xff, 0x80, 0x4d, 0xb8, 0x4d, 0x7a, 0x8b, 0xfc, 0x7f, 0x5a, 0x2d, 0xed,
	0x9d, 0x1d, 0x8b, 0x88, 0x06, 0x84, 0x0b, 0xfd, 0x2a, 0x33, 0xaf, 0x75, 0x3c, 0x96, 0x28, 0xf4,
	0xab, 0xbf, 0x3f, 0x5a, 0xd7, 0xdb, 0xbf, 0x8b, 0xe0, 0xe9, 0x3d, 0x7d, 0xd2, 0x5c, 0xf0, 0x48,
	0xf5, 0x3f, 0xa2, 0xcc, 0xb3, 0x2d, 0x12, 0x46, 0xdc, 0x23, 0xa2, 0x5a, 0xa8, 0x95, 0xea, 0x2b,
	0xc6, 0xeb, 0x99, 0x5d, 0x91, 0x6f, 0x19, 0x94, 0x64, 0x67, 0x09, 0xf4, 0x30, 0x8c, 0xb2, 0xbe,
	0x6b, 0x6c, 0xdc, 0xed, 0x11, 0xa1, 0xf1, 0xe4, 0xdc, 0x46, 0x9e, 0x05, 0xb5, 0x51, 0x1f, 0xe7,
	0xf4, 0x5d, 0x0a, 0xb4, 0x52, 0xe4, 0x69, 0x0a, 0x4c, 0x9b, 0x3e, 0xed, 0x96, 0xca, 0xab, 0x7c,
	0xc4, 0xa5, 0x7d, 0x05, 0xff, 0x4f, 0x3c, 0x63, 0xe9, 0x76, 0x55, 0x8c, 0xe3, 0x85, 0x54, 0x91,
	0xc2, 0x4e, 0xe9, 0x8e, 0x07, 0xa4, 0x72, 0x05, 0x8f, 0x3b, 0xbf, 0x17, 0xc1, 0x8e, 0x4d, 0x83,
	0xf9, 0x6b, 0xdc, 0x78, 0x3c, 0x3d, 0xf5, 0x66, 0x72, 0xbf, 0xcd, 0xc2, 0xf9, 0x27, 0x85, 0x76,
	0xa9, 0x8f, 0x43, 0x17, 0x52, 0xee, 0xea, 0x2e, 0x09, 0xd3, 0xeb, 0xd6, 0x87, 0xab, 0x73, 0xcf,
	0x9f, 0xd9, 0x7e, 0x6e, 0xfd, 0x28, 0x96, 0x8e, 0x10, 0xfa, 0x59, 0xdc, 0x3a, 0x92, 0x94, 0xc8,
	0x11, 0x50, 0x9a, 0x89, 0xd5, 0x36, 0x60, 0x2b, 0xcb, 0xfc, 0x95, 0xe5, 0x74, 0x90, 0x23, 0x3a,
	0x79, 0x4e, 0xa7, 0x6d, 0x74, 0xf2, 0x9c, 0xdb, 0xe2, 0x8e, 0x0c, 0x98, 0x26, 0x72, 0x84, 0x69,
	0xe6, 0x59, 0xa6, 0xd9, 0x36, 0x4c, 0x33, 0xcf, 0xeb, 0x2e, 0xa5, 0x1f, 0xbb, 0xf7, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x7d, 0x1f, 0x1f, 0x7e, 0x78, 0x07, 0x00, 0x00,
}
