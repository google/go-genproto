// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/ads/googleads/v2/resources/carrier_constant.proto

package resources

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A carrier criterion that can be used in campaign targeting.
type CarrierConstant struct {
	// Immutable. The resource name of the carrier criterion.
	// Carrier criterion resource names have the form:
	//
	// `carrierConstants/{criterion_id}`
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// Output only. The ID of the carrier criterion.
	Id *wrappers.Int64Value `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The full name of the carrier in English.
	Name *wrappers.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The country code of the country where the carrier is located, e.g., "AR",
	// "FR", etc.
	CountryCode          *wrappers.StringValue `protobuf:"bytes,4,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CarrierConstant) Reset()         { *m = CarrierConstant{} }
func (m *CarrierConstant) String() string { return proto.CompactTextString(m) }
func (*CarrierConstant) ProtoMessage()    {}
func (*CarrierConstant) Descriptor() ([]byte, []int) {
	return fileDescriptor_957973bfe45b6adb, []int{0}
}

func (m *CarrierConstant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CarrierConstant.Unmarshal(m, b)
}
func (m *CarrierConstant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CarrierConstant.Marshal(b, m, deterministic)
}
func (m *CarrierConstant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CarrierConstant.Merge(m, src)
}
func (m *CarrierConstant) XXX_Size() int {
	return xxx_messageInfo_CarrierConstant.Size(m)
}
func (m *CarrierConstant) XXX_DiscardUnknown() {
	xxx_messageInfo_CarrierConstant.DiscardUnknown(m)
}

var xxx_messageInfo_CarrierConstant proto.InternalMessageInfo

func (m *CarrierConstant) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *CarrierConstant) GetId() *wrappers.Int64Value {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CarrierConstant) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CarrierConstant) GetCountryCode() *wrappers.StringValue {
	if m != nil {
		return m.CountryCode
	}
	return nil
}

func init() {
	proto.RegisterType((*CarrierConstant)(nil), "google.ads.googleads.v2.resources.CarrierConstant")
}

func init() {
	proto.RegisterFile("google/ads/googleads/v2/resources/carrier_constant.proto", fileDescriptor_957973bfe45b6adb)
}

var fileDescriptor_957973bfe45b6adb = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x6b, 0x14, 0x31,
	0x18, 0xc6, 0xd9, 0x6c, 0x15, 0x4c, 0x2b, 0xc2, 0xe0, 0x61, 0xad, 0x45, 0x5b, 0xa5, 0xb0, 0x78,
	0x48, 0xca, 0xf8, 0x07, 0x89, 0xa7, 0xec, 0x0a, 0x45, 0x0f, 0x5a, 0x56, 0xdc, 0x83, 0x2c, 0x2c,
	0xd9, 0x24, 0x1d, 0x03, 0x33, 0x79, 0x87, 0x24, 0xb3, 0x22, 0xe2, 0xc1, 0xaf, 0xe2, 0xd1, 0x8f,
	0xe2, 0xa7, 0xe8, 0xb9, 0x7e, 0x03, 0x4f, 0xb2, 0x33, 0x99, 0xe9, 0xba, 0x82, 0xed, 0xed, 0x99,
	0x79, 0x9f, 0xdf, 0x93, 0xe7, 0x85, 0x17, 0x3f, 0xcf, 0x00, 0xb2, 0x5c, 0x53, 0xa1, 0x3c, 0x6d,
	0xe4, 0x4a, 0x2d, 0x53, 0xea, 0xb4, 0x87, 0xca, 0x49, 0xed, 0xa9, 0x14, 0xce, 0x19, 0xed, 0xe6,
	0x12, 0xac, 0x0f, 0xc2, 0x06, 0x52, 0x3a, 0x08, 0x90, 0x1c, 0x34, 0x76, 0x22, 0x94, 0x27, 0x1d,
	0x49, 0x96, 0x29, 0xe9, 0xc8, 0xdd, 0xfb, 0x6d, 0x78, 0x69, 0xe8, 0xa9, 0xd1, 0xb9, 0x9a, 0x2f,
	0xf4, 0x47, 0xb1, 0x34, 0xe0, 0x9a, 0x8c, 0xdd, 0x3b, 0x6b, 0x86, 0x16, 0x8b, 0xa3, 0x7b, 0x71,
	0x54, 0x7f, 0x2d, 0xaa, 0x53, 0xfa, 0xc9, 0x89, 0xb2, 0xd4, 0xce, 0xc7, 0xf9, 0xde, 0x1a, 0x2a,
	0xac, 0x85, 0x20, 0x82, 0x01, 0x1b, 0xa7, 0x0f, 0x7e, 0x21, 0x7c, 0x6b, 0xdc, 0xf4, 0x1e, 0xc7,
	0xda, 0xc9, 0x7b, 0x7c, 0xb3, 0x7d, 0x63, 0x6e, 0x45, 0xa1, 0x07, 0xbd, 0xfd, 0xde, 0xf0, 0xc6,
	0xe8, 0xe8, 0x8c, 0x5f, 0xfb, 0xcd, 0x1f, 0xe1, 0xe1, 0xc5, 0x12, 0x51, 0x95, 0xc6, 0x13, 0x09,
	0x05, 0xdd, 0x08, 0x9a, 0xec, 0xb4, 0x31, 0x6f, 0x44, 0xa1, 0x93, 0x23, 0x8c, 0x8c, 0x1a, 0xa0,
	0xfd, 0xde, 0x70, 0x3b, 0xbd, 0x1b, 0x51, 0xd2, 0xb6, 0x26, 0xaf, 0x6c, 0x78, 0xf6, 0x64, 0x2a,
	0xf2, 0x4a, 0x8f, 0xfa, 0x67, 0xbc, 0x3f, 0x41, 0x46, 0x25, 0x4f, 0xf1, 0x56, 0xfd, 0x7e, 0xbf,
	0x66, 0xf6, 0xfe, 0x61, 0xde, 0x05, 0x67, 0x6c, 0xb6, 0x06, 0xd5, 0xf6, 0xe4, 0x25, 0xde, 0x91,
	0x50, 0xd9, 0xe0, 0x3e, 0xcf, 0x25, 0x28, 0x3d, 0xd8, 0xba, 0x2a, 0xbe, 0x1d, 0xb1, 0x31, 0x28,
	0xcd, 0x26, 0xe7, 0xfc, 0xed, 0xd5, 0x77, 0x4d, 0x1e, 0xca, 0xbf, 0x7f, 0x78, 0xfa, 0x65, 0xf3,
	0x1e, 0xbe, 0x8e, 0xbe, 0x21, 0x7c, 0x28, 0xa1, 0x20, 0x97, 0x5e, 0xc4, 0xe8, 0xf6, 0x46, 0xfe,
	0xc9, 0xaa, 0xf4, 0x49, 0xef, 0xc3, 0xeb, 0x88, 0x66, 0x90, 0x0b, 0x9b, 0x11, 0x70, 0x19, 0xcd,
	0xb4, 0xad, 0x57, 0xa2, 0x17, 0x0d, 0xff, 0x73, 0xa5, 0x2f, 0x3a, 0xf5, 0x1d, 0xf5, 0x8f, 0x39,
	0xff, 0x81, 0x0e, 0x8e, 0x9b, 0x48, 0xae, 0x3c, 0x69, 0xe4, 0x4a, 0x4d, 0x53, 0x32, 0x69, 0x9d,
	0x3f, 0x5b, 0xcf, 0x8c, 0x2b, 0x3f, 0xeb, 0x3c, 0xb3, 0x69, 0x3a, 0xeb, 0x3c, 0xe7, 0xe8, 0xb0,
	0x19, 0x30, 0xc6, 0x95, 0x67, 0xac, 0x73, 0x31, 0x36, 0x4d, 0x19, 0xeb, 0x7c, 0x8b, 0xeb, 0x75,
	0xd9, 0xc7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x33, 0x75, 0x32, 0x51, 0x03, 0x00, 0x00,
}
